// Generated from js/SyslParser.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');
var SyslParserListener = require('./SyslParserListener').SyslParserListener;
var grammarFileName = "SyslParser.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003C\u039a\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0002\u0007\u0002\u00bb\n\u0002\f\u0002\u000e",
    "\u0002\u00be\u000b\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0005\u0003\u00c4\n\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0007\u0004\u00cb\n\u0004\f\u0004\u000e\u0004\u00ce",
    "\u000b\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0006",
    "\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0006\u0007\u00d9\n",
    "\u0007\r\u0007\u000e\u0007\u00da\u0003\b\u0003\b\u0003\b\u0003\t\u0003",
    "\t\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n\u00e6\n\n\f\n\u000e\n\u00e9",
    "\u000b\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0007\u000b\u00f1\n\u000b\f\u000b\u000e\u000b\u00f4\u000b\u000b\u0003",
    "\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u00fd",
    "\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0007\r\u0103\n\r\f\r\u000e\r\u0106",
    "\u000b\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0005\u000e\u010c\n",
    "\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u0112",
    "\n\u000f\f\u000f\u000e\u000f\u0115\u000b\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u011d\n",
    "\u0010\u0003\u0010\u0005\u0010\u0120\n\u0010\u0003\u0011\u0003\u0011",
    "\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0006\u0013",
    "\u0129\n\u0013\r\u0013\u000e\u0013\u012a\u0003\u0013\u0003\u0013\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0132\n\u0014\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016",
    "\u0006\u0016\u013b\n\u0016\r\u0016\u000e\u0016\u013c\u0003\u0016\u0003",
    "\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0145",
    "\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0149\n\u0017\u0003\u0017",
    "\u0005\u0017\u014c\n\u0017\u0003\u0017\u0005\u0017\u014f\n\u0017\u0003",
    "\u0017\u0003\u0017\u0005\u0017\u0153\n\u0017\u0005\u0017\u0155\n\u0017",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u015b\n",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0006\u0019\u0161",
    "\n\u0019\r\u0019\u000e\u0019\u0162\u0003\u0019\u0003\u0019\u0003\u001a",
    "\u0003\u001a\u0005\u001a\u0169\n\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0005\u001a\u016e\n\u001a\u0003\u001a\u0005\u001a\u0171\n\u001a",
    "\u0005\u001a\u0173\n\u001a\u0003\u001b\u0003\u001b\u0003\u001c\u0007",
    "\u001c\u0178\n\u001c\f\u001c\u000e\u001c\u017b\u000b\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0005\u001c\u0180\n\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0006\u001c\u018a\n\u001c\r\u001c\u000e\u001c\u018b\u0003\u001c",
    "\u0005\u001c\u018f\n\u001c\u0003\u001d\u0003\u001d\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0007\u001f\u0198\n\u001f",
    "\f\u001f\u000e\u001f\u019b\u000b\u001f\u0003 \u0003 \u0005 \u019f\n",
    " \u0003 \u0005 \u01a2\n \u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0005\"\u01ab\n\"\u0006\"\u01ad\n\"\r\"\u000e\"\u01ae\u0003",
    "\"\u0003\"\u0003#\u0003#\u0003#\u0005#\u01b6\n#\u0003$\u0007$\u01b9",
    "\n$\f$\u000e$\u01bc\u000b$\u0003$\u0003$\u0003$\u0003$\u0006$\u01c2",
    "\n$\r$\u000e$\u01c3\u0003$\u0003$\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'",
    "\u0003\'\u0005\'\u01d7\n\'\u0003\'\u0005\'\u01da\n\'\u0003(\u0003(\u0003",
    "(\u0003(\u0007(\u01e0\n(\f(\u000e(\u01e3\u000b(\u0003)\u0003)\u0005",
    ")\u01e7\n)\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u01ee\n*\u0003",
    "*\u0003*\u0003+\u0003+\u0003,\u0003,\u0003,\u0005,\u01f7\n,\u0003-\u0003",
    "-\u0006-\u01fb\n-\r-\u000e-\u01fc\u0005-\u01ff\n-\u0003-\u0005-\u0202",
    "\n-\u0003.\u0003.\u0003.\u0007.\u0207\n.\f.\u000e.\u020a\u000b.\u0003",
    "/\u0003/\u0003/\u00030\u00030\u00031\u00031\u00032\u00032\u00062\u0215",
    "\n2\r2\u000e2\u0216\u00032\u00032\u00032\u00032\u00052\u021d\n2\u0005",
    "2\u021f\n2\u00033\u00033\u00033\u00033\u00073\u0225\n3\f3\u000e3\u0228",
    "\u000b3\u00033\u00033\u00034\u00034\u00034\u00034\u00054\u0230\n4\u0003",
    "4\u00034\u00054\u0234\n4\u00035\u00035\u00035\u00035\u00035\u00075\u023b",
    "\n5\f5\u000e5\u023e\u000b5\u00035\u00035\u00036\u00036\u00056\u0244",
    "\n6\u00036\u00036\u00036\u00076\u0249\n6\f6\u000e6\u024c\u000b6\u0003",
    "6\u00036\u00037\u00037\u00077\u0252\n7\f7\u000e7\u0255\u000b7\u0003",
    "8\u00038\u00038\u00038\u00038\u00078\u025c\n8\f8\u000e8\u025f\u000b",
    "8\u00038\u00038\u00039\u00039\u0003:\u0003:\u0003:\u0003:\u0006:\u0269",
    "\n:\r:\u000e:\u026a\u0003:\u0003:\u0003;\u0006;\u0270\n;\r;\u000e;\u0271",
    "\u0003<\u0005<\u0275\n<\u0003<\u0003<\u0003<\u0006<\u027a\n<\r<\u000e",
    "<\u027b\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0006=\u0284\n=\r",
    "=\u000e=\u0285\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003>\u0005",
    ">\u028f\n>\u0003>\u0005>\u0292\n>\u0003?\u0003?\u0003?\u0003@\u0003",
    "@\u0005@\u0299\n@\u0003A\u0003A\u0003A\u0007A\u029e\nA\fA\u000eA\u02a1",
    "\u000bA\u0003B\u0003B\u0003B\u0003B\u0003C\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0005C\u02b0\nC\u0003C\u0005C\u02b3\n",
    "C\u0003D\u0003D\u0005D\u02b7\nD\u0003D\u0005D\u02ba\nD\u0003D\u0005",
    "D\u02bd\nD\u0003D\u0003D\u0003D\u0006D\u02c2\nD\rD\u000eD\u02c3\u0003",
    "D\u0003D\u0003E\u0003E\u0003F\u0003F\u0003F\u0005F\u02cd\nF\u0003F\u0005",
    "F\u02d0\nF\u0003F\u0005F\u02d3\nF\u0003F\u0003F\u0003F\u0003F\u0006",
    "F\u02d9\nF\rF\u000eF\u02da\u0003F\u0003F\u0005F\u02df\nF\u0005F\u02e1",
    "\nF\u0003G\u0003G\u0005G\u02e5\nG\u0003G\u0003G\u0003G\u0003G\u0006",
    "G\u02eb\nG\rG\u000eG\u02ec\u0003G\u0003G\u0003H\u0003H\u0003H\u0003",
    "H\u0005H\u02f5\nH\u0003I\u0003I\u0003I\u0003I\u0007I\u02fb\nI\fI\u000e",
    "I\u02fe\u000bI\u0003J\u0003J\u0003J\u0003J\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0005K\u0309\nK\u0003L\u0003L\u0006L\u030d\nL\rL\u000eL\u030e",
    "\u0003L\u0005L\u0312\nL\u0003M\u0003M\u0003M\u0003N\u0003N\u0003O\u0003",
    "O\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003Q\u0003Q\u0003R\u0003",
    "R\u0003R\u0003R\u0005R\u0327\nR\u0003R\u0003R\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0006S\u0330\nS\rS\u000eS\u0331\u0003S\u0003S\u0005S\u0336",
    "\nS\u0003T\u0003T\u0003T\u0005T\u033b\nT\u0003T\u0005T\u033e\nT\u0003",
    "T\u0003T\u0003T\u0003T\u0006T\u0344\nT\rT\u000eT\u0345\u0003T\u0003",
    "T\u0005T\u034a\nT\u0003U\u0003U\u0003U\u0003U\u0005U\u0350\nU\u0003",
    "U\u0003U\u0003U\u0003U\u0006U\u0356\nU\rU\u000eU\u0357\u0003U\u0003",
    "U\u0005U\u035c\nU\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0003V\u0003V\u0006V\u0369\nV\rV\u000eV\u036a\u0003V\u0003",
    "V\u0003W\u0007W\u0370\nW\fW\u000eW\u0373\u000bW\u0003W\u0003W\u0003",
    "W\u0003W\u0003X\u0005X\u037a\nX\u0003X\u0003X\u0003X\u0007X\u037f\n",
    "X\fX\u000eX\u0382\u000bX\u0003Y\u0003Y\u0007Y\u0386\nY\fY\u000eY\u0389",
    "\u000bY\u0003Z\u0006Z\u038c\nZ\rZ\u000eZ\u038d\u0003[\u0005[\u0391\n",
    "[\u0003[\u0006[\u0394\n[\r[\u000e[\u0395\u0003[\u0003[\u0003[\u0002",
    "\u0002\\\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018",
    "\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|",
    "~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094",
    "\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac",
    "\u00ae\u00b0\u00b2\u00b4\u0002\u0006\u0003\u00029:\u0003\u0002\b\t\u0004",
    "\u0002\r\u000f\u0011\u0013\u0004\u0002669:\u0002\u03c9\u0002\u00b6\u0003",
    "\u0002\u0002\u0002\u0004\u00bf\u0003\u0002\u0002\u0002\u0006\u00c7\u0003",
    "\u0002\u0002\u0002\b\u00cf\u0003\u0002\u0002\u0002\n\u00d3\u0003\u0002",
    "\u0002\u0002\f\u00d5\u0003\u0002\u0002\u0002\u000e\u00dc\u0003\u0002",
    "\u0002\u0002\u0010\u00df\u0003\u0002\u0002\u0002\u0012\u00e1\u0003\u0002",
    "\u0002\u0002\u0014\u00ec\u0003\u0002\u0002\u0002\u0016\u00f7\u0003\u0002",
    "\u0002\u0002\u0018\u00fe\u0003\u0002\u0002\u0002\u001a\u010b\u0003\u0002",
    "\u0002\u0002\u001c\u010d\u0003\u0002\u0002\u0002\u001e\u0118\u0003\u0002",
    "\u0002\u0002 \u0121\u0003\u0002\u0002\u0002\"\u0123\u0003\u0002\u0002",
    "\u0002$\u0125\u0003\u0002\u0002\u0002&\u0131\u0003\u0002\u0002\u0002",
    "(\u0133\u0003\u0002\u0002\u0002*\u0138\u0003\u0002\u0002\u0002,\u0154",
    "\u0003\u0002\u0002\u0002.\u0156\u0003\u0002\u0002\u00020\u015e\u0003",
    "\u0002\u0002\u00022\u0166\u0003\u0002\u0002\u00024\u0174\u0003\u0002",
    "\u0002\u00026\u0179\u0003\u0002\u0002\u00028\u0190\u0003\u0002\u0002",
    "\u0002:\u0192\u0003\u0002\u0002\u0002<\u0195\u0003\u0002\u0002\u0002",
    ">\u019c\u0003\u0002\u0002\u0002@\u01a3\u0003\u0002\u0002\u0002B\u01a6",
    "\u0003\u0002\u0002\u0002D\u01b2\u0003\u0002\u0002\u0002F\u01ba\u0003",
    "\u0002\u0002\u0002H\u01c7\u0003\u0002\u0002\u0002J\u01cd\u0003\u0002",
    "\u0002\u0002L\u01d1\u0003\u0002\u0002\u0002N\u01db\u0003\u0002\u0002",
    "\u0002P\u01e6\u0003\u0002\u0002\u0002R\u01e8\u0003\u0002\u0002\u0002",
    "T\u01f1\u0003\u0002\u0002\u0002V\u01f3\u0003\u0002\u0002\u0002X\u01fe",
    "\u0003\u0002\u0002\u0002Z\u0203\u0003\u0002\u0002\u0002\\\u020b\u0003",
    "\u0002\u0002\u0002^\u020e\u0003\u0002\u0002\u0002`\u0210\u0003\u0002",
    "\u0002\u0002b\u021e\u0003\u0002\u0002\u0002d\u0220\u0003\u0002\u0002",
    "\u0002f\u022f\u0003\u0002\u0002\u0002h\u0235\u0003\u0002\u0002\u0002",
    "j\u0241\u0003\u0002\u0002\u0002l\u024f\u0003\u0002\u0002\u0002n\u0256",
    "\u0003\u0002\u0002\u0002p\u0262\u0003\u0002\u0002\u0002r\u0264\u0003",
    "\u0002\u0002\u0002t\u026f\u0003\u0002\u0002\u0002v\u0274\u0003\u0002",
    "\u0002\u0002x\u027f\u0003\u0002\u0002\u0002z\u0291\u0003\u0002\u0002",
    "\u0002|\u0293\u0003\u0002\u0002\u0002~\u0298\u0003\u0002\u0002\u0002",
    "\u0080\u029a\u0003\u0002\u0002\u0002\u0082\u02a2\u0003\u0002\u0002\u0002",
    "\u0084\u02af\u0003\u0002\u0002\u0002\u0086\u02b4\u0003\u0002\u0002\u0002",
    "\u0088\u02c7\u0003\u0002\u0002\u0002\u008a\u02e0\u0003\u0002\u0002\u0002",
    "\u008c\u02e2\u0003\u0002\u0002\u0002\u008e\u02f0\u0003\u0002\u0002\u0002",
    "\u0090\u02f6\u0003\u0002\u0002\u0002\u0092\u02ff\u0003\u0002\u0002\u0002",
    "\u0094\u0308\u0003\u0002\u0002\u0002\u0096\u030c\u0003\u0002\u0002\u0002",
    "\u0098\u0313\u0003\u0002\u0002\u0002\u009a\u0316\u0003\u0002\u0002\u0002",
    "\u009c\u0318\u0003\u0002\u0002\u0002\u009e\u031a\u0003\u0002\u0002\u0002",
    "\u00a0\u0320\u0003\u0002\u0002\u0002\u00a2\u0326\u0003\u0002\u0002\u0002",
    "\u00a4\u032a\u0003\u0002\u0002\u0002\u00a6\u0337\u0003\u0002\u0002\u0002",
    "\u00a8\u034b\u0003\u0002\u0002\u0002\u00aa\u035d\u0003\u0002\u0002\u0002",
    "\u00ac\u0371\u0003\u0002\u0002\u0002\u00ae\u0379\u0003\u0002\u0002\u0002",
    "\u00b0\u0383\u0003\u0002\u0002\u0002\u00b2\u038b\u0003\u0002\u0002\u0002",
    "\u00b4\u0390\u0003\u0002\u0002\u0002\u00b6\u00b7\u0007!\u0002\u0002",
    "\u00b7\u00bc\u0007:\u0002\u0002\u00b8\u00b9\u0007 \u0002\u0002\u00b9",
    "\u00bb\u0007:\u0002\u0002\u00ba\u00b8\u0003\u0002\u0002\u0002\u00bb",
    "\u00be\u0003\u0002\u0002\u0002\u00bc\u00ba\u0003\u0002\u0002\u0002\u00bc",
    "\u00bd\u0003\u0002\u0002\u0002\u00bd\u0003\u0003\u0002\u0002\u0002\u00be",
    "\u00bc\u0003\u0002\u0002\u0002\u00bf\u00c0\u0007.\u0002\u0002\u00c0",
    "\u00c3\u00075\u0002\u0002\u00c1\u00c2\u0007&\u0002\u0002\u00c2\u00c4",
    "\u00075\u0002\u0002\u00c3\u00c1\u0003\u0002\u0002\u0002\u00c3\u00c4",
    "\u0003\u0002\u0002\u0002\u00c4\u00c5\u0003\u0002\u0002\u0002\u00c5\u00c6",
    "\u0007/\u0002\u0002\u00c6\u0005\u0003\u0002\u0002\u0002\u00c7\u00cc",
    "\u0005\u0002\u0002\u0002\u00c8\u00c9\u0007\"\u0002\u0002\u00c9\u00cb",
    "\u0005\u0002\u0002\u0002\u00ca\u00c8\u0003\u0002\u0002\u0002\u00cb\u00ce",
    "\u0003\u0002\u0002\u0002\u00cc\u00ca\u0003\u0002\u0002\u0002\u00cc\u00cd",
    "\u0003\u0002\u0002\u0002\u00cd\u0007\u0003\u0002\u0002\u0002\u00ce\u00cc",
    "\u0003\u0002\u0002\u0002\u00cf\u00d0\u0007*\u0002\u0002\u00d0\u00d1",
    "\u0005\u0006\u0004\u0002\u00d1\u00d2\u0007+\u0002\u0002\u00d2\t\u0003",
    "\u0002\u0002\u0002\u00d3\u00d4\t\u0002\u0002\u0002\u00d4\u000b\u0003",
    "\u0002\u0002\u0002\u00d5\u00d8\u0005<\u001f\u0002\u00d6\u00d7\u0007",
    "&\u0002\u0002\u00d7\u00d9\u0005\n\u0006\u0002\u00d8\u00d6\u0003\u0002",
    "\u0002\u0002\u00d9\u00da\u0003\u0002\u0002\u0002\u00da\u00d8\u0003\u0002",
    "\u0002\u0002\u00da\u00db\u0003\u0002\u0002\u0002\u00db\r\u0003\u0002",
    "\u0002\u0002\u00dc\u00dd\u00072\u0002\u0002\u00dd\u00de\u0007A\u0002",
    "\u0002\u00de\u000f\u0003\u0002\u0002\u0002\u00df\u00e0\u00076\u0002",
    "\u0002\u00e0\u0011\u0003\u0002\u0002\u0002\u00e1\u00e2\u0007*\u0002",
    "\u0002\u00e2\u00e7\u0005\u0010\t\u0002\u00e3\u00e4\u0007\"\u0002\u0002",
    "\u00e4\u00e6\u0005\u0010\t\u0002\u00e5\u00e3\u0003\u0002\u0002\u0002",
    "\u00e6\u00e9\u0003\u0002\u0002\u0002\u00e7\u00e5\u0003\u0002\u0002\u0002",
    "\u00e7\u00e8\u0003\u0002\u0002\u0002\u00e8\u00ea\u0003\u0002\u0002\u0002",
    "\u00e9\u00e7\u0003\u0002\u0002\u0002\u00ea\u00eb\u0007+\u0002\u0002",
    "\u00eb\u0013\u0003\u0002\u0002\u0002\u00ec\u00ed\u0007*\u0002\u0002",
    "\u00ed\u00f2\u0005\u0012\n\u0002\u00ee\u00ef\u0007\"\u0002\u0002\u00ef",
    "\u00f1\u0005\u0012\n\u0002\u00f0\u00ee\u0003\u0002\u0002\u0002\u00f1",
    "\u00f4\u0003\u0002\u0002\u0002\u00f2\u00f0\u0003\u0002\u0002\u0002\u00f2",
    "\u00f3\u0003\u0002\u0002\u0002\u00f3\u00f5\u0003\u0002\u0002\u0002\u00f4",
    "\u00f2\u0003\u0002\u0002\u0002\u00f5\u00f6\u0007+\u0002\u0002\u00f6",
    "\u0015\u0003\u0002\u0002\u0002\u00f7\u00f8\u0007:\u0002\u0002\u00f8",
    "\u00fc\u0007#\u0002\u0002\u00f9\u00fd\u0005\u0010\t\u0002\u00fa\u00fd",
    "\u0005\u0012\n\u0002\u00fb\u00fd\u0005\u0014\u000b\u0002\u00fc\u00f9",
    "\u0003\u0002\u0002\u0002\u00fc\u00fa\u0003\u0002\u0002\u0002\u00fc\u00fb",
    "\u0003\u0002\u0002\u0002\u00fd\u0017\u0003\u0002\u0002\u0002\u00fe\u00ff",
    "\u0007*\u0002\u0002\u00ff\u0104\u0005\u0016\f\u0002\u0100\u0101\u0007",
    "\"\u0002\u0002\u0101\u0103\u0005\u0016\f\u0002\u0102\u0100\u0003\u0002",
    "\u0002\u0002\u0103\u0106\u0003\u0002\u0002\u0002\u0104\u0102\u0003\u0002",
    "\u0002\u0002\u0104\u0105\u0003\u0002\u0002\u0002\u0105\u0107\u0003\u0002",
    "\u0002\u0002\u0106\u0104\u0003\u0002\u0002\u0002\u0107\u0108\u0007+",
    "\u0002\u0002\u0108\u0019\u0003\u0002\u0002\u0002\u0109\u010c\u0005\u0016",
    "\f\u0002\u010a\u010c\u0005\u0002\u0002\u0002\u010b\u0109\u0003\u0002",
    "\u0002\u0002\u010b\u010a\u0003\u0002\u0002\u0002\u010c\u001b\u0003\u0002",
    "\u0002\u0002\u010d\u010e\u0007*\u0002\u0002\u010e\u0113\u0005\u001a",
    "\u000e\u0002\u010f\u0110\u0007\"\u0002\u0002\u0110\u0112\u0005\u001a",
    "\u000e\u0002\u0111\u010f\u0003\u0002\u0002\u0002\u0112\u0115\u0003\u0002",
    "\u0002\u0002\u0113\u0111\u0003\u0002\u0002\u0002\u0113\u0114\u0003\u0002",
    "\u0002\u0002\u0114\u0116\u0003\u0002\u0002\u0002\u0115\u0113\u0003\u0002",
    "\u0002\u0002\u0116\u0117\u0007+\u0002\u0002\u0117\u001d\u0003\u0002",
    "\u0002\u0002\u0118\u011c\u0007\u0016\u0002\u0002\u0119\u011d\u0005\n",
    "\u0006\u0002\u011a\u011d\u0005\f\u0007\u0002\u011b\u011d\u0007\u0005",
    "\u0002\u0002\u011c\u0119\u0003\u0002\u0002\u0002\u011c\u011a\u0003\u0002",
    "\u0002\u0002\u011c\u011b\u0003\u0002\u0002\u0002\u011d\u011f\u0003\u0002",
    "\u0002\u0002\u011e\u0120\u0005\u0004\u0003\u0002\u011f\u011e\u0003\u0002",
    "\u0002\u0002\u011f\u0120\u0003\u0002\u0002\u0002\u0120\u001f\u0003\u0002",
    "\u0002\u0002\u0121\u0122\u0005\u001e\u0010\u0002\u0122!\u0003\u0002",
    "\u0002\u0002\u0123\u0124\u0005\n\u0006\u0002\u0124#\u0003\u0002\u0002",
    "\u0002\u0125\u0126\u0007%\u0002\u0002\u0126\u0128\u0007\u0003\u0002",
    "\u0002\u0127\u0129\u0005\u000e\b\u0002\u0128\u0127\u0003\u0002\u0002",
    "\u0002\u0129\u012a\u0003\u0002\u0002\u0002\u012a\u0128\u0003\u0002\u0002",
    "\u0002\u012a\u012b\u0003\u0002\u0002\u0002\u012b\u012c\u0003\u0002\u0002",
    "\u0002\u012c\u012d\u0007\u0004\u0002\u0002\u012d%\u0003\u0002\u0002",
    "\u0002\u012e\u0132\u00076\u0002\u0002\u012f\u0132\u0005\u0012\n\u0002",
    "\u0130\u0132\u0005$\u0013\u0002\u0131\u012e\u0003\u0002\u0002\u0002",
    "\u0131\u012f\u0003\u0002\u0002\u0002\u0131\u0130\u0003\u0002\u0002\u0002",
    "\u0132\'\u0003\u0002\u0002\u0002\u0133\u0134\u0007(\u0002\u0002\u0134",
    "\u0135\u0007C\u0002\u0002\u0135\u0136\u0007#\u0002\u0002\u0136\u0137",
    "\u0005&\u0014\u0002\u0137)\u0003\u0002\u0002\u0002\u0138\u013a\u0007",
    "\u0003\u0002\u0002\u0139\u013b\u0005(\u0015\u0002\u013a\u0139\u0003",
    "\u0002\u0002\u0002\u013b\u013c\u0003\u0002\u0002\u0002\u013c\u013a\u0003",
    "\u0002\u0002\u0002\u013c\u013d\u0003\u0002\u0002\u0002\u013d\u013e\u0003",
    "\u0002\u0002\u0002\u013e\u013f\u0007\u0004\u0002\u0002\u013f+\u0003",
    "\u0002\u0002\u0002\u0140\u0155\u0005 \u0011\u0002\u0141\u0145\u0005",
    "\f\u0007\u0002\u0142\u0145\u0007\u0005\u0002\u0002\u0143\u0145\u0005",
    "\"\u0012\u0002\u0144\u0141\u0003\u0002\u0002\u0002\u0144\u0142\u0003",
    "\u0002\u0002\u0002\u0144\u0143\u0003\u0002\u0002\u0002\u0145\u0148\u0003",
    "\u0002\u0002\u0002\u0146\u0149\u0005.\u0018\u0002\u0147\u0149\u0005",
    "\u0004\u0003\u0002\u0148\u0146\u0003\u0002\u0002\u0002\u0148\u0147\u0003",
    "\u0002\u0002\u0002\u0148\u0149\u0003\u0002\u0002\u0002\u0149\u014b\u0003",
    "\u0002\u0002\u0002\u014a\u014c\u0007\'\u0002\u0002\u014b\u014a\u0003",
    "\u0002\u0002\u0002\u014b\u014c\u0003\u0002\u0002\u0002\u014c\u014e\u0003",
    "\u0002\u0002\u0002\u014d\u014f\u0005\u001c\u000f\u0002\u014e\u014d\u0003",
    "\u0002\u0002\u0002\u014e\u014f\u0003\u0002\u0002\u0002\u014f\u0152\u0003",
    "\u0002\u0002\u0002\u0150\u0151\u0007%\u0002\u0002\u0151\u0153\u0005",
    "*\u0016\u0002\u0152\u0150\u0003\u0002\u0002\u0002\u0152\u0153\u0003",
    "\u0002\u0002\u0002\u0153\u0155\u0003\u0002\u0002\u0002\u0154\u0140\u0003",
    "\u0002\u0002\u0002\u0154\u0144\u0003\u0002\u0002\u0002\u0155-\u0003",
    "\u0002\u0002\u0002\u0156\u0157\u0007.\u0002\u0002\u0157\u0158\u0007",
    "5\u0002\u0002\u0158\u015a\u0007\u0015\u0002\u0002\u0159\u015b\u0007",
    "5\u0002\u0002\u015a\u0159\u0003\u0002\u0002\u0002\u015a\u015b\u0003",
    "\u0002\u0002\u0002\u015b\u015c\u0003\u0002\u0002\u0002\u015c\u015d\u0007",
    "/\u0002\u0002\u015d/\u0003\u0002\u0002\u0002\u015e\u0160\u0007\u0003",
    "\u0002\u0002\u015f\u0161\u00052\u001a\u0002\u0160\u015f\u0003\u0002",
    "\u0002\u0002\u0161\u0162\u0003\u0002\u0002\u0002\u0162\u0160\u0003\u0002",
    "\u0002\u0002\u0162\u0163\u0003\u0002\u0002\u0002\u0163\u0164\u0003\u0002",
    "\u0002\u0002\u0164\u0165\u0007\u0004\u0002\u0002\u01651\u0003\u0002",
    "\u0002\u0002\u0166\u0172\u0005\n\u0006\u0002\u0167\u0169\u0005.\u0018",
    "\u0002\u0168\u0167\u0003\u0002\u0002\u0002\u0168\u0169\u0003\u0002\u0002",
    "\u0002\u0169\u016a\u0003\u0002\u0002\u0002\u016a\u016d\u0007\u001c\u0002",
    "\u0002\u016b\u016e\u0005,\u0017\u0002\u016c\u016e\u00050\u0019\u0002",
    "\u016d\u016b\u0003\u0002\u0002\u0002\u016d\u016c\u0003\u0002\u0002\u0002",
    "\u016e\u0170\u0003\u0002\u0002\u0002\u016f\u0171\u00076\u0002\u0002",
    "\u0170\u016f\u0003\u0002\u0002\u0002\u0170\u0171\u0003\u0002\u0002\u0002",
    "\u0171\u0173\u0003\u0002\u0002\u0002\u0172\u0168\u0003\u0002\u0002\u0002",
    "\u0172\u0173\u0003\u0002\u0002\u0002\u01733\u0003\u0002\u0002\u0002",
    "\u0174\u0175\u00056\u001c\u0002\u01755\u0003\u0002\u0002\u0002\u0176",
    "\u0178\u00078\u0002\u0002\u0177\u0176\u0003\u0002\u0002\u0002\u0178",
    "\u017b\u0003\u0002\u0002\u0002\u0179\u0177\u0003\u0002\u0002\u0002\u0179",
    "\u017a\u0003\u0002\u0002\u0002\u017a\u017c\u0003\u0002\u0002\u0002\u017b",
    "\u0179\u0003\u0002\u0002\u0002\u017c\u017d\t\u0003\u0002\u0002\u017d",
    "\u017f\u0005\n\u0006\u0002\u017e\u0180\u0005\u001c\u000f\u0002\u017f",
    "\u017e\u0003\u0002\u0002\u0002\u017f\u0180\u0003\u0002\u0002\u0002\u0180",
    "\u0181\u0003\u0002\u0002\u0002\u0181\u018e\u0007%\u0002\u0002\u0182",
    "\u018f\u0007\u0014\u0002\u0002\u0183\u0189\u0007\u0003\u0002\u0002\u0184",
    "\u018a\u00078\u0002\u0002\u0185\u018a\u00052\u001a\u0002\u0186\u018a",
    "\u0005(\u0015\u0002\u0187\u018a\u00054\u001b\u0002\u0188\u018a\u0007",
    "\u0014\u0002\u0002\u0189\u0184\u0003\u0002\u0002\u0002\u0189\u0185\u0003",
    "\u0002\u0002\u0002\u0189\u0186\u0003\u0002\u0002\u0002\u0189\u0187\u0003",
    "\u0002\u0002\u0002\u0189\u0188\u0003\u0002\u0002\u0002\u018a\u018b\u0003",
    "\u0002\u0002\u0002\u018b\u0189\u0003\u0002\u0002\u0002\u018b\u018c\u0003",
    "\u0002\u0002\u0002\u018c\u018d\u0003\u0002\u0002\u0002\u018d\u018f\u0007",
    "\u0004\u0002\u0002\u018e\u0182\u0003\u0002\u0002\u0002\u018e\u0183\u0003",
    "\u0002\u0002\u0002\u018f7\u0003\u0002\u0002\u0002\u0190\u0191\u0005",
    "\n\u0006\u0002\u01919\u0003\u0002\u0002\u0002\u0192\u0193\u0007\u001b",
    "\u0002\u0002\u0193\u0194\u00058\u001d\u0002\u0194;\u0003\u0002\u0002",
    "\u0002\u0195\u0199\u00058\u001d\u0002\u0196\u0198\u0005:\u001e\u0002",
    "\u0197\u0196\u0003\u0002\u0002\u0002\u0198\u019b\u0003\u0002\u0002\u0002",
    "\u0199\u0197\u0003\u0002\u0002\u0002\u0199\u019a\u0003\u0002\u0002\u0002",
    "\u019a=\u0003\u0002\u0002\u0002\u019b\u0199\u0003\u0002\u0002\u0002",
    "\u019c\u019e\u0005<\u001f\u0002\u019d\u019f\u00076\u0002\u0002\u019e",
    "\u019d\u0003\u0002\u0002\u0002\u019e\u019f\u0003\u0002\u0002\u0002\u019f",
    "\u01a1\u0003\u0002\u0002\u0002\u01a0\u01a2\u0005\u001c\u000f\u0002\u01a1",
    "\u01a0\u0003\u0002\u0002\u0002\u01a1\u01a2\u0003\u0002\u0002\u0002\u01a2",
    "?\u0003\u0002\u0002\u0002\u01a3\u01a4\u0007:\u0002\u0002\u01a4\u01a5",
    "\u0007%\u0002\u0002\u01a5A\u0003\u0002\u0002\u0002\u01a6\u01a7\u0007",
    "%\u0002\u0002\u01a7\u01ac\u0007\u0003\u0002\u0002\u01a8\u01aa\u0007",
    ":\u0002\u0002\u01a9\u01ab\u0005\u001c\u000f\u0002\u01aa\u01a9\u0003",
    "\u0002\u0002\u0002\u01aa\u01ab\u0003\u0002\u0002\u0002\u01ab\u01ad\u0003",
    "\u0002\u0002\u0002\u01ac\u01a8\u0003\u0002\u0002\u0002\u01ad\u01ae\u0003",
    "\u0002\u0002\u0002\u01ae\u01ac\u0003\u0002\u0002\u0002\u01ae\u01af\u0003",
    "\u0002\u0002\u0002\u01af\u01b0\u0003\u0002\u0002\u0002\u01b0\u01b1\u0007",
    "\u0004\u0002\u0002\u01b1C\u0003\u0002\u0002\u0002\u01b2\u01b3\t\u0003",
    "\u0002\u0002\u01b3\u01b5\u0007:\u0002\u0002\u01b4\u01b6\u0005B\"\u0002",
    "\u01b5\u01b4\u0003\u0002\u0002\u0002\u01b5\u01b6\u0003\u0002\u0002\u0002",
    "\u01b6E\u0003\u0002\u0002\u0002\u01b7\u01b9\u00078\u0002\u0002\u01b8",
    "\u01b7\u0003\u0002\u0002\u0002\u01b9\u01bc\u0003\u0002\u0002\u0002\u01ba",
    "\u01b8\u0003\u0002\u0002\u0002\u01ba\u01bb\u0003\u0002\u0002\u0002\u01bb",
    "\u01bd\u0003\u0002\u0002\u0002\u01bc\u01ba\u0003\u0002\u0002\u0002\u01bd",
    "\u01be\u0007\u0007\u0002\u0002\u01be\u01bf\u0005@!\u0002\u01bf\u01c1",
    "\u0007\u0003\u0002\u0002\u01c0\u01c2\u0005D#\u0002\u01c1\u01c0\u0003",
    "\u0002\u0002\u0002\u01c2\u01c3\u0003\u0002\u0002\u0002\u01c3\u01c1\u0003",
    "\u0002\u0002\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4\u01c5\u0003",
    "\u0002\u0002\u0002\u01c5\u01c6\u0007\u0004\u0002\u0002\u01c6G\u0003",
    "\u0002\u0002\u0002\u01c7\u01c8\u0007(\u0002\u0002\u01c8\u01c9\u0007",
    ":\u0002\u0002\u01c9\u01ca\u0007#\u0002\u0002\u01ca\u01cb\u00076\u0002",
    "\u0002\u01cb\u01cc\u00077\u0002\u0002\u01ccI\u0003\u0002\u0002\u0002",
    "\u01cd\u01ce\u0007,\u0002\u0002\u01ce\u01cf\u0007:\u0002\u0002\u01cf",
    "\u01d0\u0007-\u0002\u0002\u01d0K\u0003\u0002\u0002\u0002\u01d1\u01d2",
    "\u0007:\u0002\u0002\u01d2\u01d6\u0007#\u0002\u0002\u01d3\u01d7\u0007",
    "\u0005\u0002\u0002\u01d4\u01d7\u0005\n\u0006\u0002\u01d5\u01d7\u0005",
    "J&\u0002\u01d6\u01d3\u0003\u0002\u0002\u0002\u01d6\u01d4\u0003\u0002",
    "\u0002\u0002\u01d6\u01d5\u0003\u0002\u0002\u0002\u01d7\u01d9\u0003\u0002",
    "\u0002\u0002\u01d8\u01da\u0007\'\u0002\u0002\u01d9\u01d8\u0003\u0002",
    "\u0002\u0002\u01d9\u01da\u0003\u0002\u0002\u0002\u01daM\u0003\u0002",
    "\u0002\u0002\u01db\u01dc\u0007\'\u0002\u0002\u01dc\u01e1\u0005L\'\u0002",
    "\u01dd\u01de\u0007)\u0002\u0002\u01de\u01e0\u0005L\'\u0002\u01df\u01dd",
    "\u0003\u0002\u0002\u0002\u01e0\u01e3\u0003\u0002\u0002\u0002\u01e1\u01df",
    "\u0003\u0002\u0002\u0002\u01e1\u01e2\u0003\u0002\u0002\u0002\u01e2O",
    "\u0003\u0002\u0002\u0002\u01e3\u01e1\u0003\u0002\u0002\u0002\u01e4\u01e7",
    "\u0005\n\u0006\u0002\u01e5\u01e7\u00075\u0002\u0002\u01e6\u01e4\u0003",
    "\u0002\u0002\u0002\u01e6\u01e5\u0003\u0002\u0002\u0002\u01e7Q\u0003",
    "\u0002\u0002\u0002\u01e8\u01e9\u0007,\u0002\u0002\u01e9\u01ea\u0005",
    "P)\u0002\u01ea\u01ed\u0007\u001c\u0002\u0002\u01eb\u01ee\u0007\u0005",
    "\u0002\u0002\u01ec\u01ee\u0005\n\u0006\u0002\u01ed\u01eb\u0003\u0002",
    "\u0002\u0002\u01ed\u01ec\u0003\u0002\u0002\u0002\u01ee\u01ef\u0003\u0002",
    "\u0002\u0002\u01ef\u01f0\u0007-\u0002\u0002\u01f0S\u0003\u0002\u0002",
    "\u0002\u01f1\u01f2\u0005P)\u0002\u01f2U\u0003\u0002\u0002\u0002\u01f3",
    "\u01f6\u0007$\u0002\u0002\u01f4\u01f7\u0005T+\u0002\u01f5\u01f7\u0005",
    "R*\u0002\u01f6\u01f4\u0003\u0002\u0002\u0002\u01f6\u01f5\u0003\u0002",
    "\u0002\u0002\u01f7W\u0003\u0002\u0002\u0002\u01f8\u01ff\u0007$\u0002",
    "\u0002\u01f9\u01fb\u0005V,\u0002\u01fa\u01f9\u0003\u0002\u0002\u0002",
    "\u01fb\u01fc\u0003\u0002\u0002\u0002\u01fc\u01fa\u0003\u0002\u0002\u0002",
    "\u01fc\u01fd\u0003\u0002\u0002\u0002\u01fd\u01ff\u0003\u0002\u0002\u0002",
    "\u01fe\u01f8\u0003\u0002\u0002\u0002\u01fe\u01fa\u0003\u0002\u0002\u0002",
    "\u01ff\u0201\u0003\u0002\u0002\u0002\u0200\u0202\u0005N(\u0002\u0201",
    "\u0200\u0003\u0002\u0002\u0002\u0201\u0202\u0003\u0002\u0002\u0002\u0202",
    "Y\u0003\u0002\u0002\u0002\u0203\u0208\u0005\n\u0006\u0002\u0204\u0205",
    "\u0007$\u0002\u0002\u0205\u0207\u0005\n\u0006\u0002\u0206\u0204\u0003",
    "\u0002\u0002\u0002\u0207\u020a\u0003\u0002\u0002\u0002\u0208\u0206\u0003",
    "\u0002\u0002\u0002\u0208\u0209\u0003\u0002\u0002\u0002\u0209[\u0003",
    "\u0002\u0002\u0002\u020a\u0208\u0003\u0002\u0002\u0002\u020b\u020c\u0007",
    "\u000b\u0002\u0002\u020c\u020d\u0007A\u0002\u0002\u020d]\u0003\u0002",
    "\u0002\u0002\u020e\u020f\u0005<\u001f\u0002\u020f_\u0003\u0002\u0002",
    "\u0002\u0210\u0211\u0005\n\u0006\u0002\u0211a\u0003\u0002\u0002\u0002",
    "\u0212\u0215\u00076\u0002\u0002\u0213\u0215\u0005\n\u0006\u0002\u0214",
    "\u0212\u0003\u0002\u0002\u0002\u0214\u0213\u0003\u0002\u0002\u0002\u0215",
    "\u0216\u0003\u0002\u0002\u0002\u0216\u0214\u0003\u0002\u0002\u0002\u0216",
    "\u0217\u0003\u0002\u0002\u0002\u0217\u021f\u0003\u0002\u0002\u0002\u0218",
    "\u0219\u0005\n\u0006\u0002\u0219\u021c\u0007\u001c\u0002\u0002\u021a",
    "\u021d\u0005\n\u0006\u0002\u021b\u021d\u0007\u0005\u0002\u0002\u021c",
    "\u021a\u0003\u0002\u0002\u0002\u021c\u021b\u0003\u0002\u0002\u0002\u021d",
    "\u021f\u0003\u0002\u0002\u0002\u021e\u0214\u0003\u0002\u0002\u0002\u021e",
    "\u0218\u0003\u0002\u0002\u0002\u021fc\u0003\u0002\u0002\u0002\u0220",
    "\u0221\u0007.\u0002\u0002\u0221\u0226\u0005b2\u0002\u0222\u0223\u0007",
    "\"\u0002\u0002\u0223\u0225\u0005b2\u0002\u0224\u0222\u0003\u0002\u0002",
    "\u0002\u0225\u0228\u0003\u0002\u0002\u0002\u0226\u0224\u0003\u0002\u0002",
    "\u0002\u0226\u0227\u0003\u0002\u0002\u0002\u0227\u0229\u0003\u0002\u0002",
    "\u0002\u0228\u0226\u0003\u0002\u0002\u0002\u0229\u022a\u0007/\u0002",
    "\u0002\u022ae\u0003\u0002\u0002\u0002\u022b\u0230\u0007\u001a\u0002",
    "\u0002\u022c\u022d\u0005^0\u0002\u022d\u022e\u0007\u001d\u0002\u0002",
    "\u022e\u0230\u0003\u0002\u0002\u0002\u022f\u022b\u0003\u0002\u0002\u0002",
    "\u022f\u022c\u0003\u0002\u0002\u0002\u0230\u0231\u0003\u0002\u0002\u0002",
    "\u0231\u0233\u0005`1\u0002\u0232\u0234\u0005d3\u0002\u0233\u0232\u0003",
    "\u0002\u0002\u0002\u0233\u0234\u0003\u0002\u0002\u0002\u0234g\u0003",
    "\u0002\u0002\u0002\u0235\u0236\u0007\f\u0002\u0002\u0236\u0237\u0007",
    "=\u0002\u0002\u0237\u0238\u0007%\u0002\u0002\u0238\u023c\u0007\u0003",
    "\u0002\u0002\u0239\u023b\u0005\u0084C\u0002\u023a\u0239\u0003\u0002",
    "\u0002\u0002\u023b\u023e\u0003\u0002\u0002\u0002\u023c\u023a\u0003\u0002",
    "\u0002\u0002\u023c\u023d\u0003\u0002\u0002\u0002\u023d\u023f\u0003\u0002",
    "\u0002\u0002\u023e\u023c\u0003\u0002\u0002\u0002\u023f\u0240\u0007\u0004",
    "\u0002\u0002\u0240i\u0003\u0002\u0002\u0002\u0241\u0243\u0007\u0010",
    "\u0002\u0002\u0242\u0244\u0007=\u0002\u0002\u0243\u0242\u0003\u0002",
    "\u0002\u0002\u0243\u0244\u0003\u0002\u0002\u0002\u0244\u0245\u0003\u0002",
    "\u0002\u0002\u0245\u0246\u0007%\u0002\u0002\u0246\u024a\u0007\u0003",
    "\u0002\u0002\u0247\u0249\u0005\u0084C\u0002\u0248\u0247\u0003\u0002",
    "\u0002\u0002\u0249\u024c\u0003\u0002\u0002\u0002\u024a\u0248\u0003\u0002",
    "\u0002\u0002\u024a\u024b\u0003\u0002\u0002\u0002\u024b\u024d\u0003\u0002",
    "\u0002\u0002\u024c\u024a\u0003\u0002\u0002\u0002\u024d\u024e\u0007\u0004",
    "\u0002\u0002\u024ek\u0003\u0002\u0002\u0002\u024f\u0253\u0005h5\u0002",
    "\u0250\u0252\u0005j6\u0002\u0251\u0250\u0003\u0002\u0002\u0002\u0252",
    "\u0255\u0003\u0002\u0002\u0002\u0253\u0251\u0003\u0002\u0002\u0002\u0253",
    "\u0254\u0003\u0002\u0002\u0002\u0254m\u0003\u0002\u0002\u0002\u0255",
    "\u0253\u0003\u0002\u0002\u0002\u0256\u0257\t\u0004\u0002\u0002\u0257",
    "\u0258\u0007=\u0002\u0002\u0258\u0259\u0007%\u0002\u0002\u0259\u025d",
    "\u0007\u0003\u0002\u0002\u025a\u025c\u0005\u0084C\u0002\u025b\u025a",
    "\u0003\u0002\u0002\u0002\u025c\u025f\u0003\u0002\u0002\u0002\u025d\u025b",
    "\u0003\u0002\u0002\u0002\u025d\u025e\u0003\u0002\u0002\u0002\u025e\u0260",
    "\u0003\u0002\u0002\u0002\u025f\u025d\u0003\u0002\u0002\u0002\u0260\u0261",
    "\u0007\u0004\u0002\u0002\u0261o\u0003\u0002\u0002\u0002\u0262\u0263",
    "\u00078\u0002\u0002\u0263q\u0003\u0002\u0002\u0002\u0264\u0265\u0005",
    "\n\u0006\u0002\u0265\u0266\u0007%\u0002\u0002\u0266\u0268\u0007\u0003",
    "\u0002\u0002\u0267\u0269\u0005\u0084C\u0002\u0268\u0267\u0003\u0002",
    "\u0002\u0002\u0269\u026a\u0003\u0002\u0002\u0002\u026a\u0268\u0003\u0002",
    "\u0002\u0002\u026a\u026b\u0003\u0002\u0002\u0002\u026b\u026c\u0003\u0002",
    "\u0002\u0002\u026c\u026d\u0007\u0004\u0002\u0002\u026ds\u0003\u0002",
    "\u0002\u0002\u026e\u0270\t\u0005\u0002\u0002\u026f\u026e\u0003\u0002",
    "\u0002\u0002\u0270\u0271\u0003\u0002\u0002\u0002\u0271\u026f\u0003\u0002",
    "\u0002\u0002\u0271\u0272\u0003\u0002\u0002\u0002\u0272u\u0003\u0002",
    "\u0002\u0002\u0273\u0275\u0005t;\u0002\u0274\u0273\u0003\u0002\u0002",
    "\u0002\u0274\u0275\u0003\u0002\u0002\u0002\u0275\u0276\u0003\u0002\u0002",
    "\u0002\u0276\u0277\u0007%\u0002\u0002\u0277\u0279\u0007\u0003\u0002",
    "\u0002\u0278\u027a\u0005\u0084C\u0002\u0279\u0278\u0003\u0002\u0002",
    "\u0002\u027a\u027b\u0003\u0002\u0002\u0002\u027b\u0279\u0003\u0002\u0002",
    "\u0002\u027b\u027c\u0003\u0002\u0002\u0002\u027c\u027d\u0003\u0002\u0002",
    "\u0002\u027d\u027e\u0007\u0004\u0002\u0002\u027ew\u0003\u0002\u0002",
    "\u0002\u027f\u0280\u0007\u0017\u0002\u0002\u0280\u0281\u0007%\u0002",
    "\u0002\u0281\u0283\u0007\u0003\u0002\u0002\u0282\u0284\u0005v<\u0002",
    "\u0283\u0282\u0003\u0002\u0002\u0002\u0284\u0285\u0003\u0002\u0002\u0002",
    "\u0285\u0283\u0003\u0002\u0002\u0002\u0285\u0286\u0003\u0002\u0002\u0002",
    "\u0286\u0287\u0003\u0002\u0002\u0002\u0287\u0288\u0007\u0004\u0002\u0002",
    "\u0288y\u0003\u0002\u0002\u0002\u0289\u0292\u0005\u000e\b\u0002\u028a",
    "\u0292\u00076\u0002\u0002\u028b\u028e\u0005<\u001f\u0002\u028c\u028d",
    "\u0007\u001e\u0002\u0002\u028d\u028f\u0005\n\u0006\u0002\u028e\u028c",
    "\u0003\u0002\u0002\u0002\u028e\u028f\u0003\u0002\u0002\u0002\u028f\u0292",
    "\u0003\u0002\u0002\u0002\u0290\u0292\u0007\u0014\u0002\u0002\u0291\u0289",
    "\u0003\u0002\u0002\u0002\u0291\u028a\u0003\u0002\u0002\u0002\u0291\u028b",
    "\u0003\u0002\u0002\u0002\u0291\u0290\u0003\u0002\u0002\u0002\u0292{",
    "\u0003\u0002\u0002\u0002\u0293\u0294\u0007\u0018\u0002\u0002\u0294\u0295",
    "\u0005<\u001f\u0002\u0295}\u0003\u0002\u0002\u0002\u0296\u0299\u0005",
    "\f\u0007\u0002\u0297\u0299\u00052\u001a\u0002\u0298\u0296\u0003\u0002",
    "\u0002\u0002\u0298\u0297\u0003\u0002\u0002\u0002\u0299\u007f\u0003\u0002",
    "\u0002\u0002\u029a\u029f\u0005~@\u0002\u029b\u029c\u0007\"\u0002\u0002",
    "\u029c\u029e\u0005~@\u0002\u029d\u029b\u0003\u0002\u0002\u0002\u029e",
    "\u02a1\u0003\u0002\u0002\u0002\u029f\u029d\u0003\u0002\u0002\u0002\u029f",
    "\u02a0\u0003\u0002\u0002\u0002\u02a0\u0081\u0003\u0002\u0002\u0002\u02a1",
    "\u029f\u0003\u0002\u0002\u0002\u02a2\u02a3\u0007.\u0002\u0002\u02a3",
    "\u02a4\u0005\u0080A\u0002\u02a4\u02a5\u0007/\u0002\u0002\u02a5\u0083",
    "\u0003\u0002\u0002\u0002\u02a6\u02b0\u0005l7\u0002\u02a7\u02b0\u0005",
    "n8\u0002\u02a8\u02b0\u0005\\/\u0002\u02a9\u02b0\u0005f4\u0002\u02aa",
    "\u02b0\u0005x=\u0002\u02ab\u02b0\u0005p9\u0002\u02ac\u02b0\u0005r:\u0002",
    "\u02ad\u02b0\u0005z>\u0002\u02ae\u02b0\u0005(\u0015\u0002\u02af\u02a6",
    "\u0003\u0002\u0002\u0002\u02af\u02a7\u0003\u0002\u0002\u0002\u02af\u02a8",
    "\u0003\u0002\u0002\u0002\u02af\u02a9\u0003\u0002\u0002\u0002\u02af\u02aa",
    "\u0003\u0002\u0002\u0002\u02af\u02ab\u0003\u0002\u0002\u0002\u02af\u02ac",
    "\u0003\u0002\u0002\u0002\u02af\u02ad\u0003\u0002\u0002\u0002\u02af\u02ae",
    "\u0003\u0002\u0002\u0002\u02b0\u02b2\u0003\u0002\u0002\u0002\u02b1\u02b3",
    "\u0005\u001c\u000f\u0002\u02b2\u02b1\u0003\u0002\u0002\u0002\u02b2\u02b3",
    "\u0003\u0002\u0002\u0002\u02b3\u0085\u0003\u0002\u0002\u0002\u02b4\u02b6",
    "\u0007\u0006\u0002\u0002\u02b5\u02b7\u0005N(\u0002\u02b6\u02b5\u0003",
    "\u0002\u0002\u0002\u02b6\u02b7\u0003\u0002\u0002\u0002\u02b7\u02b9\u0003",
    "\u0002\u0002\u0002\u02b8\u02ba\u0005\u0082B\u0002\u02b9\u02b8\u0003",
    "\u0002\u0002\u0002\u02b9\u02ba\u0003\u0002\u0002\u0002\u02ba\u02bc\u0003",
    "\u0002\u0002\u0002\u02bb\u02bd\u0005\u001c\u000f\u0002\u02bc\u02bb\u0003",
    "\u0002\u0002\u0002\u02bc\u02bd\u0003\u0002\u0002\u0002\u02bd\u02be\u0003",
    "\u0002\u0002\u0002\u02be\u02bf\u0007%\u0002\u0002\u02bf\u02c1\u0007",
    "\u0003\u0002\u0002\u02c0\u02c2\u0005\u0084C\u0002\u02c1\u02c0\u0003",
    "\u0002\u0002\u0002\u02c2\u02c3\u0003\u0002\u0002\u0002\u02c3\u02c1\u0003",
    "\u0002\u0002\u0002\u02c3\u02c4\u0003\u0002\u0002\u0002\u02c4\u02c5\u0003",
    "\u0002\u0002\u0002\u02c5\u02c6\u0007\u0004\u0002\u0002\u02c6\u0087\u0003",
    "\u0002\u0002\u0002\u02c7\u02c8\u0007\u0014\u0002\u0002\u02c8\u0089\u0003",
    "\u0002\u0002\u0002\u02c9\u02e1\u0007\u0014\u0002\u0002\u02ca\u02cc\u0005",
    "Z.\u0002\u02cb\u02cd\u00076\u0002\u0002\u02cc\u02cb\u0003\u0002\u0002",
    "\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002\u02cd\u02cf\u0003\u0002\u0002",
    "\u0002\u02ce\u02d0\u0005\u0082B\u0002\u02cf\u02ce\u0003\u0002\u0002",
    "\u0002\u02cf\u02d0\u0003\u0002\u0002\u0002\u02d0\u02d2\u0003\u0002\u0002",
    "\u0002\u02d1\u02d3\u0005\u001c\u000f\u0002\u02d2\u02d1\u0003\u0002\u0002",
    "\u0002\u02d2\u02d3\u0003\u0002\u0002\u0002\u02d3\u02d4\u0003\u0002\u0002",
    "\u0002\u02d4\u02de\u0007%\u0002\u0002\u02d5\u02df\u0005\u0088E\u0002",
    "\u02d6\u02d8\u0007\u0003\u0002\u0002\u02d7\u02d9\u0005\u0084C\u0002",
    "\u02d8\u02d7\u0003\u0002\u0002\u0002\u02d9\u02da\u0003\u0002\u0002\u0002",
    "\u02da\u02d8\u0003\u0002\u0002\u0002\u02da\u02db\u0003\u0002\u0002\u0002",
    "\u02db\u02dc\u0003\u0002\u0002\u0002\u02dc\u02dd\u0007\u0004\u0002\u0002",
    "\u02dd\u02df\u0003\u0002\u0002\u0002\u02de\u02d5\u0003\u0002\u0002\u0002",
    "\u02de\u02d6\u0003\u0002\u0002\u0002\u02df\u02e1\u0003\u0002\u0002\u0002",
    "\u02e0\u02c9\u0003\u0002\u0002\u0002\u02e0\u02ca\u0003\u0002\u0002\u0002",
    "\u02e1\u008b\u0003\u0002\u0002\u0002\u02e2\u02e4\u0005X-\u0002\u02e3",
    "\u02e5\u0005\u001c\u000f\u0002\u02e4\u02e3\u0003\u0002\u0002\u0002\u02e4",
    "\u02e5\u0003\u0002\u0002\u0002\u02e5\u02e6\u0003\u0002\u0002\u0002\u02e6",
    "\u02e7\u0007%\u0002\u0002\u02e7\u02ea\u0007\u0003\u0002\u0002\u02e8",
    "\u02eb\u0005\u0086D\u0002\u02e9\u02eb\u0005\u008cG\u0002\u02ea\u02e8",
    "\u0003\u0002\u0002\u0002\u02ea\u02e9\u0003\u0002\u0002\u0002\u02eb\u02ec",
    "\u0003\u0002\u0002\u0002\u02ec\u02ea\u0003\u0002\u0002\u0002\u02ec\u02ed",
    "\u0003\u0002\u0002\u0002\u02ed\u02ee\u0003\u0002\u0002\u0002\u02ee\u02ef",
    "\u0007\u0004\u0002\u0002\u02ef\u008d\u0003\u0002\u0002\u0002\u02f0\u02f1",
    "\u0005\n\u0006\u0002\u02f1\u02f4\u0007#\u0002\u0002\u02f2\u02f5\u0007",
    "\u0005\u0002\u0002\u02f3\u02f5\u0005\n\u0006\u0002\u02f4\u02f2\u0003",
    "\u0002\u0002\u0002\u02f4\u02f3\u0003\u0002\u0002\u0002\u02f5\u008f\u0003",
    "\u0002\u0002\u0002\u02f6\u02f7\u0007\'\u0002\u0002\u02f7\u02fc\u0005",
    "\u008eH\u0002\u02f8\u02f9\u0007)\u0002\u0002\u02f9\u02fb\u0005\u008e",
    "H\u0002\u02fa\u02f8\u0003\u0002\u0002\u0002\u02fb\u02fe\u0003\u0002",
    "\u0002\u0002\u02fc\u02fa\u0003\u0002\u0002\u0002\u02fc\u02fd\u0003\u0002",
    "\u0002\u0002\u02fd\u0091\u0003\u0002\u0002\u0002\u02fe\u02fc\u0003\u0002",
    "\u0002\u0002\u02ff\u0300\u0005^0\u0002\u0300\u0301\u0007\u001d\u0002",
    "\u0002\u0301\u0302\u0005`1\u0002\u0302\u0093\u0003\u0002\u0002\u0002",
    "\u0303\u0309\u0005\n\u0006\u0002\u0304\u0305\u0007,\u0002\u0002\u0305",
    "\u0306\u0005\n\u0006\u0002\u0306\u0307\u0007-\u0002\u0002\u0307\u0309",
    "\u0003\u0002\u0002\u0002\u0308\u0303\u0003\u0002\u0002\u0002\u0308\u0304",
    "\u0003\u0002\u0002\u0002\u0309\u0095\u0003\u0002\u0002\u0002\u030a\u030b",
    "\u0007$\u0002\u0002\u030b\u030d\u0005\u0094K\u0002\u030c\u030a\u0003",
    "\u0002\u0002\u0002\u030d\u030e\u0003\u0002\u0002\u0002\u030e\u030c\u0003",
    "\u0002\u0002\u0002\u030e\u030f\u0003\u0002\u0002\u0002\u030f\u0311\u0003",
    "\u0002\u0002\u0002\u0310\u0312\u0005\u0090I\u0002\u0311\u0310\u0003",
    "\u0002\u0002\u0002\u0311\u0312\u0003\u0002\u0002\u0002\u0312\u0097\u0003",
    "\u0002\u0002\u0002\u0313\u0314\u0007\u0006\u0002\u0002\u0314\u0315\u0005",
    "\u0096L\u0002\u0315\u0099\u0003\u0002\u0002\u0002\u0316\u0317\u0005",
    "<\u001f\u0002\u0317\u009b\u0003\u0002\u0002\u0002\u0318\u0319\u0005",
    "<\u001f\u0002\u0319\u009d\u0003\u0002\u0002\u0002\u031a\u031b\u0005",
    "\u009cO\u0002\u031b\u031c\u0007\u001d\u0002\u0002\u031c\u031d\u0005",
    "\u009aN\u0002\u031d\u031e\u0007\u001e\u0002\u0002\u031e\u031f\u0005",
    "\n\u0006\u0002\u031f\u009f\u0003\u0002\u0002\u0002\u0320\u0321\u0005",
    "\n\u0006\u0002\u0321\u00a1\u0003\u0002\u0002\u0002\u0322\u0327\u0005",
    "\u00a0Q\u0002\u0323\u0327\u0005\u0092J\u0002\u0324\u0327\u0005\u0098",
    "M\u0002\u0325\u0327\u0005\u009eP\u0002\u0326\u0322\u0003\u0002\u0002",
    "\u0002\u0326\u0323\u0003\u0002\u0002\u0002\u0326\u0324\u0003\u0002\u0002",
    "\u0002\u0326\u0325\u0003\u0002\u0002\u0002\u0327\u0328\u0003\u0002\u0002",
    "\u0002\u0328\u0329\u0005\u001c\u000f\u0002\u0329\u00a3\u0003\u0002\u0002",
    "\u0002\u032a\u032b\u0007\u001f\u0002\u0002\u032b\u0335\u0007%\u0002",
    "\u0002\u032c\u0336\u0007\u0014\u0002\u0002\u032d\u032f\u0007\u0003\u0002",
    "\u0002\u032e\u0330\u0005\u00a2R\u0002\u032f\u032e\u0003\u0002\u0002",
    "\u0002\u0330\u0331\u0003\u0002\u0002\u0002\u0331\u032f\u0003\u0002\u0002",
    "\u0002\u0331\u0332\u0003\u0002\u0002\u0002\u0332\u0333\u0003\u0002\u0002",
    "\u0002\u0333\u0334\u0007\u0004\u0002\u0002\u0334\u0336\u0003\u0002\u0002",
    "\u0002\u0335\u032c\u0003\u0002\u0002\u0002\u0335\u032d\u0003\u0002\u0002",
    "\u0002\u0336\u00a5\u0003\u0002\u0002\u0002\u0337\u0338\u0007\u0019\u0002",
    "\u0002\u0338\u033a\u0005\n\u0006\u0002\u0339\u033b\u0005\u0082B\u0002",
    "\u033a\u0339\u0003\u0002\u0002\u0002\u033a\u033b\u0003\u0002\u0002\u0002",
    "\u033b\u033d\u0003\u0002\u0002\u0002\u033c\u033e\u0005\u001c\u000f\u0002",
    "\u033d\u033c\u0003\u0002\u0002\u0002\u033d\u033e\u0003\u0002\u0002\u0002",
    "\u033e\u033f\u0003\u0002\u0002\u0002\u033f\u0349\u0007%\u0002\u0002",
    "\u0340\u034a\u0007\u0014\u0002\u0002\u0341\u0343\u0007\u0003\u0002\u0002",
    "\u0342\u0344\u0005\u0084C\u0002\u0343\u0342\u0003\u0002\u0002\u0002",
    "\u0344\u0345\u0003\u0002\u0002\u0002\u0345\u0343\u0003\u0002\u0002\u0002",
    "\u0345\u0346\u0003\u0002\u0002\u0002\u0346\u0347\u0003\u0002\u0002\u0002",
    "\u0347\u0348\u0007\u0004\u0002\u0002\u0348\u034a\u0003\u0002\u0002\u0002",
    "\u0349\u0340\u0003\u0002\u0002\u0002\u0349\u0341\u0003\u0002\u0002\u0002",
    "\u034a\u00a7\u0003\u0002\u0002\u0002\u034b\u034c\u0005<\u001f\u0002",
    "\u034c\u034d\u0007\u001e\u0002\u0002\u034d\u034f\u0005\n\u0006\u0002",
    "\u034e\u0350\u0005\u001c\u000f\u0002\u034f\u034e\u0003\u0002\u0002\u0002",
    "\u034f\u0350\u0003\u0002\u0002\u0002\u0350\u0351\u0003\u0002\u0002\u0002",
    "\u0351\u035b\u0007%\u0002\u0002\u0352\u035c\u0007\u0014\u0002\u0002",
    "\u0353\u0355\u0007\u0003\u0002\u0002\u0354\u0356\u0005\u0084C\u0002",
    "\u0355\u0354\u0003\u0002\u0002\u0002\u0356\u0357\u0003\u0002\u0002\u0002",
    "\u0357\u0355\u0003\u0002\u0002\u0002\u0357\u0358\u0003\u0002\u0002\u0002",
    "\u0358\u0359\u0003\u0002\u0002\u0002\u0359\u035a\u0007\u0004\u0002\u0002",
    "\u035a\u035c\u0003\u0002\u0002\u0002\u035b\u0352\u0003\u0002\u0002\u0002",
    "\u035b\u0353\u0003\u0002\u0002\u0002\u035c\u00a9\u0003\u0002\u0002\u0002",
    "\u035d\u0368\u0007\u0003\u0002\u0002\u035e\u0369\u00056\u001c\u0002",
    "\u035f\u0369\u0005F$\u0002\u0360\u0369\u00078\u0002\u0002\u0361\u0369",
    "\u0005\u008cG\u0002\u0362\u0369\u0005\u008aF\u0002\u0363\u0369\u0005",
    "\u00a4S\u0002\u0364\u0369\u0005\u00a6T\u0002\u0365\u0369\u0005\u00a8",
    "U\u0002\u0366\u0369\u0005(\u0015\u0002\u0367\u0369\u0005|?\u0002\u0368",
    "\u035e\u0003\u0002\u0002\u0002\u0368\u035f\u0003\u0002\u0002\u0002\u0368",
    "\u0360\u0003\u0002\u0002\u0002\u0368\u0361\u0003\u0002\u0002\u0002\u0368",
    "\u0362\u0003\u0002\u0002\u0002\u0368\u0363\u0003\u0002\u0002\u0002\u0368",
    "\u0364\u0003\u0002\u0002\u0002\u0368\u0365\u0003\u0002\u0002\u0002\u0368",
    "\u0366\u0003\u0002\u0002\u0002\u0368\u0367\u0003\u0002\u0002\u0002\u0369",
    "\u036a\u0003\u0002\u0002\u0002\u036a\u0368\u0003\u0002\u0002\u0002\u036a",
    "\u036b\u0003\u0002\u0002\u0002\u036b\u036c\u0003\u0002\u0002\u0002\u036c",
    "\u036d\u0007\u0004\u0002\u0002\u036d\u00ab\u0003\u0002\u0002\u0002\u036e",
    "\u0370\u00078\u0002\u0002\u036f\u036e\u0003\u0002\u0002\u0002\u0370",
    "\u0373\u0003\u0002\u0002\u0002\u0371\u036f\u0003\u0002\u0002\u0002\u0371",
    "\u0372\u0003\u0002\u0002\u0002\u0372\u0374\u0003\u0002\u0002\u0002\u0373",
    "\u0371\u0003\u0002\u0002\u0002\u0374\u0375\u0005> \u0002\u0375\u0376",
    "\u0007%\u0002\u0002\u0376\u0377\u0005\u00aaV\u0002\u0377\u00ad\u0003",
    "\u0002\u0002\u0002\u0378\u037a\u0007$\u0002\u0002\u0379\u0378\u0003",
    "\u0002\u0002\u0002\u0379\u037a\u0003\u0002\u0002\u0002\u037a\u037b\u0003",
    "\u0002\u0002\u0002\u037b\u0380\u0007:\u0002\u0002\u037c\u037d\u0007",
    "$\u0002\u0002\u037d\u037f\u0007:\u0002\u0002\u037e\u037c\u0003\u0002",
    "\u0002\u0002\u037f\u0382\u0003\u0002\u0002\u0002\u0380\u037e\u0003\u0002",
    "\u0002\u0002\u0380\u0381\u0003\u0002\u0002\u0002\u0381\u00af\u0003\u0002",
    "\u0002\u0002\u0382\u0380\u0003\u0002\u0002\u0002\u0383\u0387\u0007\n",
    "\u0002\u0002\u0384\u0386\u00078\u0002\u0002\u0385\u0384\u0003\u0002",
    "\u0002\u0002\u0386\u0389\u0003\u0002\u0002\u0002\u0387\u0385\u0003\u0002",
    "\u0002\u0002\u0387\u0388\u0003\u0002\u0002\u0002\u0388\u00b1\u0003\u0002",
    "\u0002\u0002\u0389\u0387\u0003\u0002\u0002\u0002\u038a\u038c\u0005\u00b0",
    "Y\u0002\u038b\u038a\u0003\u0002\u0002\u0002\u038c\u038d\u0003\u0002",
    "\u0002\u0002\u038d\u038b\u0003\u0002\u0002\u0002\u038d\u038e\u0003\u0002",
    "\u0002\u0002\u038e\u00b3\u0003\u0002\u0002\u0002\u038f\u0391\u0005\u00b2",
    "Z\u0002\u0390\u038f\u0003\u0002\u0002\u0002\u0390\u0391\u0003\u0002",
    "\u0002\u0002\u0391\u0393\u0003\u0002\u0002\u0002\u0392\u0394\u0005\u00ac",
    "W\u0002\u0393\u0392\u0003\u0002\u0002\u0002\u0394\u0395\u0003\u0002",
    "\u0002\u0002\u0395\u0393\u0003\u0002\u0002\u0002\u0395\u0396\u0003\u0002",
    "\u0002\u0002\u0396\u0397\u0003\u0002\u0002\u0002\u0397\u0398\u0007\u0002",
    "\u0002\u0003\u0398\u00b5\u0003\u0002\u0002\u0002p\u00bc\u00c3\u00cc",
    "\u00da\u00e7\u00f2\u00fc\u0104\u010b\u0113\u011c\u011f\u012a\u0131\u013c",
    "\u0144\u0148\u014b\u014e\u0152\u0154\u015a\u0162\u0168\u016d\u0170\u0172",
    "\u0179\u017f\u0189\u018b\u018e\u0199\u019e\u01a1\u01aa\u01ae\u01b5\u01ba",
    "\u01c3\u01d6\u01d9\u01e1\u01e6\u01ed\u01f6\u01fc\u01fe\u0201\u0208\u0214",
    "\u0216\u021c\u021e\u0226\u022f\u0233\u023c\u0243\u024a\u0253\u025d\u026a",
    "\u0271\u0274\u027b\u0285\u028e\u0291\u0298\u029f\u02af\u02b2\u02b6\u02b9",
    "\u02bc\u02c3\u02cc\u02cf\u02d2\u02da\u02de\u02e0\u02e4\u02ea\u02ec\u02f4",
    "\u02fc\u0308\u030e\u0311\u0326\u0331\u0335\u033a\u033d\u0345\u0349\u034f",
    "\u0357\u035b\u0368\u036a\u0371\u0379\u0380\u0387\u038d\u0390\u0395"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, "'!wrap'", "'!table'", 
                     "'!type'", null, null, null, null, null, null, null, 
                     null, null, null, "'...'", "'..'", null, null, null, 
                     "'<->'", null, null, null, null, null, "'.. * <- *'", 
                     "'+'", "'~'", "','", "'='", "'/'", "':'", "'.'", "'?'", 
                     "'@'", "'&'", "'['", "']'", "'{'", "'}'", "'('", "')'", 
                     null, "'#'", "'|'" ];

var symbolicNames = [ null, "INDENT", "DEDENT", "NativeDataTypes", "HTTP_VERBS", 
                      "WRAP", "TABLE", "TYPE", "IMPORT", "RETURN", "IF", 
                      "FOR_EACH", "FOR", "UNTIL", "ELSE", "LOOP", "ALT", 
                      "WHILE", "WHATEVER", "DOTDOT", "SET_OF", "ONE_OF", 
                      "MIXIN", "DISTANCE", "DOT_ARROW", "NAME_SEP", "LESS_COLON", 
                      "ARROW_LEFT", "ARROW_RIGHT", "COLLECTOR", "PLUS", 
                      "TILDE", "COMMA", "EQ", "FORWARD_SLASH", "COLON", 
                      "DOT", "QN", "AT", "AMP", "SQ_OPEN", "SQ_CLOSE", "CURLY_OPEN", 
                      "CURLY_CLOSE", "OPEN_PAREN", "CLOSE_PAREN", "EMPTY_COMMENT", 
                      "HASH", "PIPE", "EMPTY_LINE", "INDENTED_COMMENT", 
                      "DIGITS", "QSTRING", "NEWLINE", "SYSL_COMMENT", "TEXT_LINE", 
                      "Name", "WS", "ErrorChar", "PREDICATE_VALUE", "SKIP_WS_ARG", 
                      "TEXT_VALUE", "NEWLINE_2", "TEXT", "POP_WS", "VAR_NAME" ];

var ruleNames =  [ "modifier", "size_spec", "modifier_list", "modifiers", 
                   "name_str", "reference", "doc_string", "quoted_string", 
                   "array_of_strings", "array_of_arrays", "nvp", "attributes", 
                   "entry", "attribs_or_modifiers", "set_type", "collection_type", 
                   "user_defined_type", "multi_line_docstring", "annotation_value", 
                   "annotation", "annotations", "field_type", "array_size", 
                   "inplace_tuple", "field", "inplace_table", "table", "package_name", 
                   "sub_package", "app_name", "name_with_attribs", "model_name", 
                   "inplace_table_def", "table_refs", "facade", "documentation_stmts", 
                   "var_in_curly", "query_var", "query_param", "http_path_part", 
                   "http_path_var_with_type", "http_path_static", "http_path_suffix", 
                   "http_path", "endpoint_name", "ret_stmt", "target", "target_endpoint", 
                   "call_arg", "call_args", "call_stmt", "if_stmt", "else_stmt", 
                   "if_else", "for_stmt", "http_method_comment", "group_stmt", 
                   "one_of_case_label", "one_of_cases", "one_of_stmt", "text_stmt", 
                   "mixin", "param", "param_list", "params", "statements", 
                   "method_def", "shortcut", "simple_endpoint", "rest_endpoint", 
                   "collector_query_var", "collector_query_param", "collector_call_stmt", 
                   "collector_http_stmt_part", "collector_http_stmt_suffix", 
                   "collector_http_stmt", "publisher", "subscriber", "collector_pubsub_call", 
                   "collector_action_stmt", "collector_stmts", "collector", 
                   "event", "subscribe", "app_decl", "application", "path", 
                   "import_stmt", "imports_decl", "sysl_file" ];

function SyslParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

SyslParser.prototype = Object.create(antlr4.Parser.prototype);
SyslParser.prototype.constructor = SyslParser;

Object.defineProperty(SyslParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

SyslParser.EOF = antlr4.Token.EOF;
SyslParser.INDENT = 1;
SyslParser.DEDENT = 2;
SyslParser.NativeDataTypes = 3;
SyslParser.HTTP_VERBS = 4;
SyslParser.WRAP = 5;
SyslParser.TABLE = 6;
SyslParser.TYPE = 7;
SyslParser.IMPORT = 8;
SyslParser.RETURN = 9;
SyslParser.IF = 10;
SyslParser.FOR_EACH = 11;
SyslParser.FOR = 12;
SyslParser.UNTIL = 13;
SyslParser.ELSE = 14;
SyslParser.LOOP = 15;
SyslParser.ALT = 16;
SyslParser.WHILE = 17;
SyslParser.WHATEVER = 18;
SyslParser.DOTDOT = 19;
SyslParser.SET_OF = 20;
SyslParser.ONE_OF = 21;
SyslParser.MIXIN = 22;
SyslParser.DISTANCE = 23;
SyslParser.DOT_ARROW = 24;
SyslParser.NAME_SEP = 25;
SyslParser.LESS_COLON = 26;
SyslParser.ARROW_LEFT = 27;
SyslParser.ARROW_RIGHT = 28;
SyslParser.COLLECTOR = 29;
SyslParser.PLUS = 30;
SyslParser.TILDE = 31;
SyslParser.COMMA = 32;
SyslParser.EQ = 33;
SyslParser.FORWARD_SLASH = 34;
SyslParser.COLON = 35;
SyslParser.DOT = 36;
SyslParser.QN = 37;
SyslParser.AT = 38;
SyslParser.AMP = 39;
SyslParser.SQ_OPEN = 40;
SyslParser.SQ_CLOSE = 41;
SyslParser.CURLY_OPEN = 42;
SyslParser.CURLY_CLOSE = 43;
SyslParser.OPEN_PAREN = 44;
SyslParser.CLOSE_PAREN = 45;
SyslParser.EMPTY_COMMENT = 46;
SyslParser.HASH = 47;
SyslParser.PIPE = 48;
SyslParser.EMPTY_LINE = 49;
SyslParser.INDENTED_COMMENT = 50;
SyslParser.DIGITS = 51;
SyslParser.QSTRING = 52;
SyslParser.NEWLINE = 53;
SyslParser.SYSL_COMMENT = 54;
SyslParser.TEXT_LINE = 55;
SyslParser.Name = 56;
SyslParser.WS = 57;
SyslParser.ErrorChar = 58;
SyslParser.PREDICATE_VALUE = 59;
SyslParser.SKIP_WS_ARG = 60;
SyslParser.TEXT_VALUE = 61;
SyslParser.NEWLINE_2 = 62;
SyslParser.TEXT = 63;
SyslParser.POP_WS = 64;
SyslParser.VAR_NAME = 65;

SyslParser.RULE_modifier = 0;
SyslParser.RULE_size_spec = 1;
SyslParser.RULE_modifier_list = 2;
SyslParser.RULE_modifiers = 3;
SyslParser.RULE_name_str = 4;
SyslParser.RULE_reference = 5;
SyslParser.RULE_doc_string = 6;
SyslParser.RULE_quoted_string = 7;
SyslParser.RULE_array_of_strings = 8;
SyslParser.RULE_array_of_arrays = 9;
SyslParser.RULE_nvp = 10;
SyslParser.RULE_attributes = 11;
SyslParser.RULE_entry = 12;
SyslParser.RULE_attribs_or_modifiers = 13;
SyslParser.RULE_set_type = 14;
SyslParser.RULE_collection_type = 15;
SyslParser.RULE_user_defined_type = 16;
SyslParser.RULE_multi_line_docstring = 17;
SyslParser.RULE_annotation_value = 18;
SyslParser.RULE_annotation = 19;
SyslParser.RULE_annotations = 20;
SyslParser.RULE_field_type = 21;
SyslParser.RULE_array_size = 22;
SyslParser.RULE_inplace_tuple = 23;
SyslParser.RULE_field = 24;
SyslParser.RULE_inplace_table = 25;
SyslParser.RULE_table = 26;
SyslParser.RULE_package_name = 27;
SyslParser.RULE_sub_package = 28;
SyslParser.RULE_app_name = 29;
SyslParser.RULE_name_with_attribs = 30;
SyslParser.RULE_model_name = 31;
SyslParser.RULE_inplace_table_def = 32;
SyslParser.RULE_table_refs = 33;
SyslParser.RULE_facade = 34;
SyslParser.RULE_documentation_stmts = 35;
SyslParser.RULE_var_in_curly = 36;
SyslParser.RULE_query_var = 37;
SyslParser.RULE_query_param = 38;
SyslParser.RULE_http_path_part = 39;
SyslParser.RULE_http_path_var_with_type = 40;
SyslParser.RULE_http_path_static = 41;
SyslParser.RULE_http_path_suffix = 42;
SyslParser.RULE_http_path = 43;
SyslParser.RULE_endpoint_name = 44;
SyslParser.RULE_ret_stmt = 45;
SyslParser.RULE_target = 46;
SyslParser.RULE_target_endpoint = 47;
SyslParser.RULE_call_arg = 48;
SyslParser.RULE_call_args = 49;
SyslParser.RULE_call_stmt = 50;
SyslParser.RULE_if_stmt = 51;
SyslParser.RULE_else_stmt = 52;
SyslParser.RULE_if_else = 53;
SyslParser.RULE_for_stmt = 54;
SyslParser.RULE_http_method_comment = 55;
SyslParser.RULE_group_stmt = 56;
SyslParser.RULE_one_of_case_label = 57;
SyslParser.RULE_one_of_cases = 58;
SyslParser.RULE_one_of_stmt = 59;
SyslParser.RULE_text_stmt = 60;
SyslParser.RULE_mixin = 61;
SyslParser.RULE_param = 62;
SyslParser.RULE_param_list = 63;
SyslParser.RULE_params = 64;
SyslParser.RULE_statements = 65;
SyslParser.RULE_method_def = 66;
SyslParser.RULE_shortcut = 67;
SyslParser.RULE_simple_endpoint = 68;
SyslParser.RULE_rest_endpoint = 69;
SyslParser.RULE_collector_query_var = 70;
SyslParser.RULE_collector_query_param = 71;
SyslParser.RULE_collector_call_stmt = 72;
SyslParser.RULE_collector_http_stmt_part = 73;
SyslParser.RULE_collector_http_stmt_suffix = 74;
SyslParser.RULE_collector_http_stmt = 75;
SyslParser.RULE_publisher = 76;
SyslParser.RULE_subscriber = 77;
SyslParser.RULE_collector_pubsub_call = 78;
SyslParser.RULE_collector_action_stmt = 79;
SyslParser.RULE_collector_stmts = 80;
SyslParser.RULE_collector = 81;
SyslParser.RULE_event = 82;
SyslParser.RULE_subscribe = 83;
SyslParser.RULE_app_decl = 84;
SyslParser.RULE_application = 85;
SyslParser.RULE_path = 86;
SyslParser.RULE_import_stmt = 87;
SyslParser.RULE_imports_decl = 88;
SyslParser.RULE_sysl_file = 89;

function ModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_modifier;
    return this;
}

ModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierContext.prototype.constructor = ModifierContext;

ModifierContext.prototype.TILDE = function() {
    return this.getToken(SyslParser.TILDE, 0);
};

ModifierContext.prototype.Name = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.Name);
    } else {
        return this.getToken(SyslParser.Name, i);
    }
};


ModifierContext.prototype.PLUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.PLUS);
    } else {
        return this.getToken(SyslParser.PLUS, i);
    }
};


ModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterModifier(this);
	}
};

ModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitModifier(this);
	}
};




SyslParser.ModifierContext = ModifierContext;

SyslParser.prototype.modifier = function() {

    var localctx = new ModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SyslParser.RULE_modifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 180;
        this.match(SyslParser.TILDE);
        this.state = 181;
        this.match(SyslParser.Name);
        this.state = 186;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SyslParser.PLUS) {
            this.state = 182;
            this.match(SyslParser.PLUS);
            this.state = 183;
            this.match(SyslParser.Name);
            this.state = 188;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Size_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_size_spec;
    return this;
}

Size_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Size_specContext.prototype.constructor = Size_specContext;

Size_specContext.prototype.OPEN_PAREN = function() {
    return this.getToken(SyslParser.OPEN_PAREN, 0);
};

Size_specContext.prototype.DIGITS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.DIGITS);
    } else {
        return this.getToken(SyslParser.DIGITS, i);
    }
};


Size_specContext.prototype.CLOSE_PAREN = function() {
    return this.getToken(SyslParser.CLOSE_PAREN, 0);
};

Size_specContext.prototype.DOT = function() {
    return this.getToken(SyslParser.DOT, 0);
};

Size_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterSize_spec(this);
	}
};

Size_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitSize_spec(this);
	}
};




SyslParser.Size_specContext = Size_specContext;

SyslParser.prototype.size_spec = function() {

    var localctx = new Size_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SyslParser.RULE_size_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 189;
        this.match(SyslParser.OPEN_PAREN);
        this.state = 190;
        this.match(SyslParser.DIGITS);
        this.state = 193;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.DOT) {
            this.state = 191;
            this.match(SyslParser.DOT);
            this.state = 192;
            this.match(SyslParser.DIGITS);
        }

        this.state = 195;
        this.match(SyslParser.CLOSE_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Modifier_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_modifier_list;
    return this;
}

Modifier_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Modifier_listContext.prototype.constructor = Modifier_listContext;

Modifier_listContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

Modifier_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.COMMA);
    } else {
        return this.getToken(SyslParser.COMMA, i);
    }
};


Modifier_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterModifier_list(this);
	}
};

Modifier_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitModifier_list(this);
	}
};




SyslParser.Modifier_listContext = Modifier_listContext;

SyslParser.prototype.modifier_list = function() {

    var localctx = new Modifier_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SyslParser.RULE_modifier_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 197;
        this.modifier();
        this.state = 202;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SyslParser.COMMA) {
            this.state = 198;
            this.match(SyslParser.COMMA);
            this.state = 199;
            this.modifier();
            this.state = 204;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_modifiers;
    return this;
}

ModifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifiersContext.prototype.constructor = ModifiersContext;

ModifiersContext.prototype.SQ_OPEN = function() {
    return this.getToken(SyslParser.SQ_OPEN, 0);
};

ModifiersContext.prototype.modifier_list = function() {
    return this.getTypedRuleContext(Modifier_listContext,0);
};

ModifiersContext.prototype.SQ_CLOSE = function() {
    return this.getToken(SyslParser.SQ_CLOSE, 0);
};

ModifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterModifiers(this);
	}
};

ModifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitModifiers(this);
	}
};




SyslParser.ModifiersContext = ModifiersContext;

SyslParser.prototype.modifiers = function() {

    var localctx = new ModifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SyslParser.RULE_modifiers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 205;
        this.match(SyslParser.SQ_OPEN);
        this.state = 206;
        this.modifier_list();
        this.state = 207;
        this.match(SyslParser.SQ_CLOSE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Name_strContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_name_str;
    return this;
}

Name_strContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Name_strContext.prototype.constructor = Name_strContext;

Name_strContext.prototype.Name = function() {
    return this.getToken(SyslParser.Name, 0);
};

Name_strContext.prototype.TEXT_LINE = function() {
    return this.getToken(SyslParser.TEXT_LINE, 0);
};

Name_strContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterName_str(this);
	}
};

Name_strContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitName_str(this);
	}
};




SyslParser.Name_strContext = Name_strContext;

SyslParser.prototype.name_str = function() {

    var localctx = new Name_strContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SyslParser.RULE_name_str);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 209;
        _la = this._input.LA(1);
        if(!(_la===SyslParser.TEXT_LINE || _la===SyslParser.Name)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_reference;
    return this;
}

ReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReferenceContext.prototype.constructor = ReferenceContext;

ReferenceContext.prototype.app_name = function() {
    return this.getTypedRuleContext(App_nameContext,0);
};

ReferenceContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.DOT);
    } else {
        return this.getToken(SyslParser.DOT, i);
    }
};


ReferenceContext.prototype.name_str = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Name_strContext);
    } else {
        return this.getTypedRuleContext(Name_strContext,i);
    }
};

ReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterReference(this);
	}
};

ReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitReference(this);
	}
};




SyslParser.ReferenceContext = ReferenceContext;

SyslParser.prototype.reference = function() {

    var localctx = new ReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SyslParser.RULE_reference);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 211;
        this.app_name();
        this.state = 214; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 212;
            this.match(SyslParser.DOT);
            this.state = 213;
            this.name_str();
            this.state = 216; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SyslParser.DOT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Doc_stringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_doc_string;
    return this;
}

Doc_stringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Doc_stringContext.prototype.constructor = Doc_stringContext;

Doc_stringContext.prototype.PIPE = function() {
    return this.getToken(SyslParser.PIPE, 0);
};

Doc_stringContext.prototype.TEXT = function() {
    return this.getToken(SyslParser.TEXT, 0);
};

Doc_stringContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterDoc_string(this);
	}
};

Doc_stringContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitDoc_string(this);
	}
};




SyslParser.Doc_stringContext = Doc_stringContext;

SyslParser.prototype.doc_string = function() {

    var localctx = new Doc_stringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SyslParser.RULE_doc_string);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 218;
        this.match(SyslParser.PIPE);
        this.state = 219;
        this.match(SyslParser.TEXT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Quoted_stringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_quoted_string;
    return this;
}

Quoted_stringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Quoted_stringContext.prototype.constructor = Quoted_stringContext;

Quoted_stringContext.prototype.QSTRING = function() {
    return this.getToken(SyslParser.QSTRING, 0);
};

Quoted_stringContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterQuoted_string(this);
	}
};

Quoted_stringContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitQuoted_string(this);
	}
};




SyslParser.Quoted_stringContext = Quoted_stringContext;

SyslParser.prototype.quoted_string = function() {

    var localctx = new Quoted_stringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SyslParser.RULE_quoted_string);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 221;
        this.match(SyslParser.QSTRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Array_of_stringsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_array_of_strings;
    return this;
}

Array_of_stringsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_of_stringsContext.prototype.constructor = Array_of_stringsContext;

Array_of_stringsContext.prototype.SQ_OPEN = function() {
    return this.getToken(SyslParser.SQ_OPEN, 0);
};

Array_of_stringsContext.prototype.quoted_string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Quoted_stringContext);
    } else {
        return this.getTypedRuleContext(Quoted_stringContext,i);
    }
};

Array_of_stringsContext.prototype.SQ_CLOSE = function() {
    return this.getToken(SyslParser.SQ_CLOSE, 0);
};

Array_of_stringsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.COMMA);
    } else {
        return this.getToken(SyslParser.COMMA, i);
    }
};


Array_of_stringsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterArray_of_strings(this);
	}
};

Array_of_stringsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitArray_of_strings(this);
	}
};




SyslParser.Array_of_stringsContext = Array_of_stringsContext;

SyslParser.prototype.array_of_strings = function() {

    var localctx = new Array_of_stringsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SyslParser.RULE_array_of_strings);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 223;
        this.match(SyslParser.SQ_OPEN);
        this.state = 224;
        this.quoted_string();
        this.state = 229;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SyslParser.COMMA) {
            this.state = 225;
            this.match(SyslParser.COMMA);
            this.state = 226;
            this.quoted_string();
            this.state = 231;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 232;
        this.match(SyslParser.SQ_CLOSE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Array_of_arraysContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_array_of_arrays;
    return this;
}

Array_of_arraysContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_of_arraysContext.prototype.constructor = Array_of_arraysContext;

Array_of_arraysContext.prototype.SQ_OPEN = function() {
    return this.getToken(SyslParser.SQ_OPEN, 0);
};

Array_of_arraysContext.prototype.array_of_strings = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Array_of_stringsContext);
    } else {
        return this.getTypedRuleContext(Array_of_stringsContext,i);
    }
};

Array_of_arraysContext.prototype.SQ_CLOSE = function() {
    return this.getToken(SyslParser.SQ_CLOSE, 0);
};

Array_of_arraysContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.COMMA);
    } else {
        return this.getToken(SyslParser.COMMA, i);
    }
};


Array_of_arraysContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterArray_of_arrays(this);
	}
};

Array_of_arraysContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitArray_of_arrays(this);
	}
};




SyslParser.Array_of_arraysContext = Array_of_arraysContext;

SyslParser.prototype.array_of_arrays = function() {

    var localctx = new Array_of_arraysContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SyslParser.RULE_array_of_arrays);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 234;
        this.match(SyslParser.SQ_OPEN);
        this.state = 235;
        this.array_of_strings();
        this.state = 240;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SyslParser.COMMA) {
            this.state = 236;
            this.match(SyslParser.COMMA);
            this.state = 237;
            this.array_of_strings();
            this.state = 242;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 243;
        this.match(SyslParser.SQ_CLOSE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NvpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_nvp;
    return this;
}

NvpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NvpContext.prototype.constructor = NvpContext;

NvpContext.prototype.Name = function() {
    return this.getToken(SyslParser.Name, 0);
};

NvpContext.prototype.EQ = function() {
    return this.getToken(SyslParser.EQ, 0);
};

NvpContext.prototype.quoted_string = function() {
    return this.getTypedRuleContext(Quoted_stringContext,0);
};

NvpContext.prototype.array_of_strings = function() {
    return this.getTypedRuleContext(Array_of_stringsContext,0);
};

NvpContext.prototype.array_of_arrays = function() {
    return this.getTypedRuleContext(Array_of_arraysContext,0);
};

NvpContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterNvp(this);
	}
};

NvpContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitNvp(this);
	}
};




SyslParser.NvpContext = NvpContext;

SyslParser.prototype.nvp = function() {

    var localctx = new NvpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SyslParser.RULE_nvp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 245;
        this.match(SyslParser.Name);
        this.state = 246;
        this.match(SyslParser.EQ);
        this.state = 250;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        switch(la_) {
        case 1:
            this.state = 247;
            this.quoted_string();
            break;

        case 2:
            this.state = 248;
            this.array_of_strings();
            break;

        case 3:
            this.state = 249;
            this.array_of_arrays();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttributesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_attributes;
    return this;
}

AttributesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttributesContext.prototype.constructor = AttributesContext;

AttributesContext.prototype.SQ_OPEN = function() {
    return this.getToken(SyslParser.SQ_OPEN, 0);
};

AttributesContext.prototype.nvp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NvpContext);
    } else {
        return this.getTypedRuleContext(NvpContext,i);
    }
};

AttributesContext.prototype.SQ_CLOSE = function() {
    return this.getToken(SyslParser.SQ_CLOSE, 0);
};

AttributesContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.COMMA);
    } else {
        return this.getToken(SyslParser.COMMA, i);
    }
};


AttributesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterAttributes(this);
	}
};

AttributesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitAttributes(this);
	}
};




SyslParser.AttributesContext = AttributesContext;

SyslParser.prototype.attributes = function() {

    var localctx = new AttributesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SyslParser.RULE_attributes);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 252;
        this.match(SyslParser.SQ_OPEN);
        this.state = 253;
        this.nvp();
        this.state = 258;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SyslParser.COMMA) {
            this.state = 254;
            this.match(SyslParser.COMMA);
            this.state = 255;
            this.nvp();
            this.state = 260;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 261;
        this.match(SyslParser.SQ_CLOSE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EntryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_entry;
    return this;
}

EntryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EntryContext.prototype.constructor = EntryContext;

EntryContext.prototype.nvp = function() {
    return this.getTypedRuleContext(NvpContext,0);
};

EntryContext.prototype.modifier = function() {
    return this.getTypedRuleContext(ModifierContext,0);
};

EntryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterEntry(this);
	}
};

EntryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitEntry(this);
	}
};




SyslParser.EntryContext = EntryContext;

SyslParser.prototype.entry = function() {

    var localctx = new EntryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SyslParser.RULE_entry);
    try {
        this.state = 265;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SyslParser.Name:
            this.enterOuterAlt(localctx, 1);
            this.state = 263;
            this.nvp();
            break;
        case SyslParser.TILDE:
            this.enterOuterAlt(localctx, 2);
            this.state = 264;
            this.modifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attribs_or_modifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_attribs_or_modifiers;
    return this;
}

Attribs_or_modifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attribs_or_modifiersContext.prototype.constructor = Attribs_or_modifiersContext;

Attribs_or_modifiersContext.prototype.SQ_OPEN = function() {
    return this.getToken(SyslParser.SQ_OPEN, 0);
};

Attribs_or_modifiersContext.prototype.entry = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EntryContext);
    } else {
        return this.getTypedRuleContext(EntryContext,i);
    }
};

Attribs_or_modifiersContext.prototype.SQ_CLOSE = function() {
    return this.getToken(SyslParser.SQ_CLOSE, 0);
};

Attribs_or_modifiersContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.COMMA);
    } else {
        return this.getToken(SyslParser.COMMA, i);
    }
};


Attribs_or_modifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterAttribs_or_modifiers(this);
	}
};

Attribs_or_modifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitAttribs_or_modifiers(this);
	}
};




SyslParser.Attribs_or_modifiersContext = Attribs_or_modifiersContext;

SyslParser.prototype.attribs_or_modifiers = function() {

    var localctx = new Attribs_or_modifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SyslParser.RULE_attribs_or_modifiers);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 267;
        this.match(SyslParser.SQ_OPEN);
        this.state = 268;
        this.entry();
        this.state = 273;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SyslParser.COMMA) {
            this.state = 269;
            this.match(SyslParser.COMMA);
            this.state = 270;
            this.entry();
            this.state = 275;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 276;
        this.match(SyslParser.SQ_CLOSE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_set_type;
    return this;
}

Set_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_typeContext.prototype.constructor = Set_typeContext;

Set_typeContext.prototype.SET_OF = function() {
    return this.getToken(SyslParser.SET_OF, 0);
};

Set_typeContext.prototype.name_str = function() {
    return this.getTypedRuleContext(Name_strContext,0);
};

Set_typeContext.prototype.reference = function() {
    return this.getTypedRuleContext(ReferenceContext,0);
};

Set_typeContext.prototype.NativeDataTypes = function() {
    return this.getToken(SyslParser.NativeDataTypes, 0);
};

Set_typeContext.prototype.size_spec = function() {
    return this.getTypedRuleContext(Size_specContext,0);
};

Set_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterSet_type(this);
	}
};

Set_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitSet_type(this);
	}
};




SyslParser.Set_typeContext = Set_typeContext;

SyslParser.prototype.set_type = function() {

    var localctx = new Set_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SyslParser.RULE_set_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 278;
        this.match(SyslParser.SET_OF);
        this.state = 282;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        switch(la_) {
        case 1:
            this.state = 279;
            this.name_str();
            break;

        case 2:
            this.state = 280;
            this.reference();
            break;

        case 3:
            this.state = 281;
            this.match(SyslParser.NativeDataTypes);
            break;

        }
        this.state = 285;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.OPEN_PAREN) {
            this.state = 284;
            this.size_spec();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collection_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_collection_type;
    return this;
}

Collection_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collection_typeContext.prototype.constructor = Collection_typeContext;

Collection_typeContext.prototype.set_type = function() {
    return this.getTypedRuleContext(Set_typeContext,0);
};

Collection_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterCollection_type(this);
	}
};

Collection_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitCollection_type(this);
	}
};




SyslParser.Collection_typeContext = Collection_typeContext;

SyslParser.prototype.collection_type = function() {

    var localctx = new Collection_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SyslParser.RULE_collection_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 287;
        this.set_type();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function User_defined_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_user_defined_type;
    return this;
}

User_defined_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
User_defined_typeContext.prototype.constructor = User_defined_typeContext;

User_defined_typeContext.prototype.name_str = function() {
    return this.getTypedRuleContext(Name_strContext,0);
};

User_defined_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterUser_defined_type(this);
	}
};

User_defined_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitUser_defined_type(this);
	}
};




SyslParser.User_defined_typeContext = User_defined_typeContext;

SyslParser.prototype.user_defined_type = function() {

    var localctx = new User_defined_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SyslParser.RULE_user_defined_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 289;
        this.name_str();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multi_line_docstringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_multi_line_docstring;
    return this;
}

Multi_line_docstringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multi_line_docstringContext.prototype.constructor = Multi_line_docstringContext;

Multi_line_docstringContext.prototype.COLON = function() {
    return this.getToken(SyslParser.COLON, 0);
};

Multi_line_docstringContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

Multi_line_docstringContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

Multi_line_docstringContext.prototype.doc_string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Doc_stringContext);
    } else {
        return this.getTypedRuleContext(Doc_stringContext,i);
    }
};

Multi_line_docstringContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterMulti_line_docstring(this);
	}
};

Multi_line_docstringContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitMulti_line_docstring(this);
	}
};




SyslParser.Multi_line_docstringContext = Multi_line_docstringContext;

SyslParser.prototype.multi_line_docstring = function() {

    var localctx = new Multi_line_docstringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SyslParser.RULE_multi_line_docstring);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 291;
        this.match(SyslParser.COLON);
        this.state = 292;
        this.match(SyslParser.INDENT);
        this.state = 294; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 293;
            this.doc_string();
            this.state = 296; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SyslParser.PIPE);
        this.state = 298;
        this.match(SyslParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Annotation_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_annotation_value;
    return this;
}

Annotation_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Annotation_valueContext.prototype.constructor = Annotation_valueContext;

Annotation_valueContext.prototype.QSTRING = function() {
    return this.getToken(SyslParser.QSTRING, 0);
};

Annotation_valueContext.prototype.array_of_strings = function() {
    return this.getTypedRuleContext(Array_of_stringsContext,0);
};

Annotation_valueContext.prototype.multi_line_docstring = function() {
    return this.getTypedRuleContext(Multi_line_docstringContext,0);
};

Annotation_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterAnnotation_value(this);
	}
};

Annotation_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitAnnotation_value(this);
	}
};




SyslParser.Annotation_valueContext = Annotation_valueContext;

SyslParser.prototype.annotation_value = function() {

    var localctx = new Annotation_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SyslParser.RULE_annotation_value);
    try {
        this.state = 303;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SyslParser.QSTRING:
            this.enterOuterAlt(localctx, 1);
            this.state = 300;
            this.match(SyslParser.QSTRING);
            break;
        case SyslParser.SQ_OPEN:
            this.enterOuterAlt(localctx, 2);
            this.state = 301;
            this.array_of_strings();
            break;
        case SyslParser.COLON:
            this.enterOuterAlt(localctx, 3);
            this.state = 302;
            this.multi_line_docstring();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_annotation;
    return this;
}

AnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationContext.prototype.constructor = AnnotationContext;

AnnotationContext.prototype.AT = function() {
    return this.getToken(SyslParser.AT, 0);
};

AnnotationContext.prototype.VAR_NAME = function() {
    return this.getToken(SyslParser.VAR_NAME, 0);
};

AnnotationContext.prototype.EQ = function() {
    return this.getToken(SyslParser.EQ, 0);
};

AnnotationContext.prototype.annotation_value = function() {
    return this.getTypedRuleContext(Annotation_valueContext,0);
};

AnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterAnnotation(this);
	}
};

AnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitAnnotation(this);
	}
};




SyslParser.AnnotationContext = AnnotationContext;

SyslParser.prototype.annotation = function() {

    var localctx = new AnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SyslParser.RULE_annotation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 305;
        this.match(SyslParser.AT);
        this.state = 306;
        this.match(SyslParser.VAR_NAME);
        this.state = 307;
        this.match(SyslParser.EQ);
        this.state = 308;
        this.annotation_value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_annotations;
    return this;
}

AnnotationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationsContext.prototype.constructor = AnnotationsContext;

AnnotationsContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

AnnotationsContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

AnnotationsContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

AnnotationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterAnnotations(this);
	}
};

AnnotationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitAnnotations(this);
	}
};




SyslParser.AnnotationsContext = AnnotationsContext;

SyslParser.prototype.annotations = function() {

    var localctx = new AnnotationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SyslParser.RULE_annotations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 310;
        this.match(SyslParser.INDENT);
        this.state = 312; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 311;
            this.annotation();
            this.state = 314; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SyslParser.AT);
        this.state = 316;
        this.match(SyslParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Field_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_field_type;
    return this;
}

Field_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Field_typeContext.prototype.constructor = Field_typeContext;

Field_typeContext.prototype.collection_type = function() {
    return this.getTypedRuleContext(Collection_typeContext,0);
};

Field_typeContext.prototype.reference = function() {
    return this.getTypedRuleContext(ReferenceContext,0);
};

Field_typeContext.prototype.NativeDataTypes = function() {
    return this.getToken(SyslParser.NativeDataTypes, 0);
};

Field_typeContext.prototype.user_defined_type = function() {
    return this.getTypedRuleContext(User_defined_typeContext,0);
};

Field_typeContext.prototype.array_size = function() {
    return this.getTypedRuleContext(Array_sizeContext,0);
};

Field_typeContext.prototype.size_spec = function() {
    return this.getTypedRuleContext(Size_specContext,0);
};

Field_typeContext.prototype.QN = function() {
    return this.getToken(SyslParser.QN, 0);
};

Field_typeContext.prototype.attribs_or_modifiers = function() {
    return this.getTypedRuleContext(Attribs_or_modifiersContext,0);
};

Field_typeContext.prototype.COLON = function() {
    return this.getToken(SyslParser.COLON, 0);
};

Field_typeContext.prototype.annotations = function() {
    return this.getTypedRuleContext(AnnotationsContext,0);
};

Field_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterField_type(this);
	}
};

Field_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitField_type(this);
	}
};




SyslParser.Field_typeContext = Field_typeContext;

SyslParser.prototype.field_type = function() {

    var localctx = new Field_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SyslParser.RULE_field_type);
    var _la = 0; // Token type
    try {
        this.state = 338;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SyslParser.SET_OF:
            this.enterOuterAlt(localctx, 1);
            this.state = 318;
            this.collection_type();
            break;
        case SyslParser.NativeDataTypes:
        case SyslParser.TEXT_LINE:
        case SyslParser.Name:
            this.enterOuterAlt(localctx, 2);
            this.state = 322;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
            switch(la_) {
            case 1:
                this.state = 319;
                this.reference();
                break;

            case 2:
                this.state = 320;
                this.match(SyslParser.NativeDataTypes);
                break;

            case 3:
                this.state = 321;
                this.user_defined_type();
                break;

            }
            this.state = 326;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
            if(la_===1) {
                this.state = 324;
                this.array_size();

            } else if(la_===2) {
                this.state = 325;
                this.size_spec();

            }
            this.state = 329;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SyslParser.QN) {
                this.state = 328;
                this.match(SyslParser.QN);
            }

            this.state = 332;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SyslParser.SQ_OPEN) {
                this.state = 331;
                this.attribs_or_modifiers();
            }

            this.state = 336;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SyslParser.COLON) {
                this.state = 334;
                this.match(SyslParser.COLON);
                this.state = 335;
                this.annotations();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Array_sizeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_array_size;
    return this;
}

Array_sizeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Array_sizeContext.prototype.constructor = Array_sizeContext;

Array_sizeContext.prototype.OPEN_PAREN = function() {
    return this.getToken(SyslParser.OPEN_PAREN, 0);
};

Array_sizeContext.prototype.DIGITS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.DIGITS);
    } else {
        return this.getToken(SyslParser.DIGITS, i);
    }
};


Array_sizeContext.prototype.DOTDOT = function() {
    return this.getToken(SyslParser.DOTDOT, 0);
};

Array_sizeContext.prototype.CLOSE_PAREN = function() {
    return this.getToken(SyslParser.CLOSE_PAREN, 0);
};

Array_sizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterArray_size(this);
	}
};

Array_sizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitArray_size(this);
	}
};




SyslParser.Array_sizeContext = Array_sizeContext;

SyslParser.prototype.array_size = function() {

    var localctx = new Array_sizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SyslParser.RULE_array_size);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 340;
        this.match(SyslParser.OPEN_PAREN);
        this.state = 341;
        this.match(SyslParser.DIGITS);
        this.state = 342;
        this.match(SyslParser.DOTDOT);
        this.state = 344;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.DIGITS) {
            this.state = 343;
            this.match(SyslParser.DIGITS);
        }

        this.state = 346;
        this.match(SyslParser.CLOSE_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Inplace_tupleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_inplace_tuple;
    return this;
}

Inplace_tupleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Inplace_tupleContext.prototype.constructor = Inplace_tupleContext;

Inplace_tupleContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

Inplace_tupleContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

Inplace_tupleContext.prototype.field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldContext);
    } else {
        return this.getTypedRuleContext(FieldContext,i);
    }
};

Inplace_tupleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterInplace_tuple(this);
	}
};

Inplace_tupleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitInplace_tuple(this);
	}
};




SyslParser.Inplace_tupleContext = Inplace_tupleContext;

SyslParser.prototype.inplace_tuple = function() {

    var localctx = new Inplace_tupleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SyslParser.RULE_inplace_tuple);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 348;
        this.match(SyslParser.INDENT);
        this.state = 350; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 349;
            this.field();
            this.state = 352; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SyslParser.TEXT_LINE || _la===SyslParser.Name);
        this.state = 354;
        this.match(SyslParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_field;
    return this;
}

FieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldContext.prototype.constructor = FieldContext;

FieldContext.prototype.name_str = function() {
    return this.getTypedRuleContext(Name_strContext,0);
};

FieldContext.prototype.LESS_COLON = function() {
    return this.getToken(SyslParser.LESS_COLON, 0);
};

FieldContext.prototype.field_type = function() {
    return this.getTypedRuleContext(Field_typeContext,0);
};

FieldContext.prototype.inplace_tuple = function() {
    return this.getTypedRuleContext(Inplace_tupleContext,0);
};

FieldContext.prototype.array_size = function() {
    return this.getTypedRuleContext(Array_sizeContext,0);
};

FieldContext.prototype.QSTRING = function() {
    return this.getToken(SyslParser.QSTRING, 0);
};

FieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterField(this);
	}
};

FieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitField(this);
	}
};




SyslParser.FieldContext = FieldContext;

SyslParser.prototype.field = function() {

    var localctx = new FieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SyslParser.RULE_field);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 356;
        this.name_str();
        this.state = 368;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.LESS_COLON || _la===SyslParser.OPEN_PAREN) {
            this.state = 358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SyslParser.OPEN_PAREN) {
                this.state = 357;
                this.array_size();
            }

            this.state = 360;
            this.match(SyslParser.LESS_COLON);
            this.state = 363;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SyslParser.NativeDataTypes:
            case SyslParser.SET_OF:
            case SyslParser.TEXT_LINE:
            case SyslParser.Name:
                this.state = 361;
                this.field_type();
                break;
            case SyslParser.INDENT:
                this.state = 362;
                this.inplace_tuple();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 366;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SyslParser.QSTRING) {
                this.state = 365;
                this.match(SyslParser.QSTRING);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Inplace_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_inplace_table;
    return this;
}

Inplace_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Inplace_tableContext.prototype.constructor = Inplace_tableContext;

Inplace_tableContext.prototype.table = function() {
    return this.getTypedRuleContext(TableContext,0);
};

Inplace_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterInplace_table(this);
	}
};

Inplace_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitInplace_table(this);
	}
};




SyslParser.Inplace_tableContext = Inplace_tableContext;

SyslParser.prototype.inplace_table = function() {

    var localctx = new Inplace_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SyslParser.RULE_inplace_table);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 370;
        this.table();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_table;
    return this;
}

TableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableContext.prototype.constructor = TableContext;

TableContext.prototype.name_str = function() {
    return this.getTypedRuleContext(Name_strContext,0);
};

TableContext.prototype.COLON = function() {
    return this.getToken(SyslParser.COLON, 0);
};

TableContext.prototype.TABLE = function() {
    return this.getToken(SyslParser.TABLE, 0);
};

TableContext.prototype.TYPE = function() {
    return this.getToken(SyslParser.TYPE, 0);
};

TableContext.prototype.WHATEVER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.WHATEVER);
    } else {
        return this.getToken(SyslParser.WHATEVER, i);
    }
};


TableContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

TableContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

TableContext.prototype.SYSL_COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.SYSL_COMMENT);
    } else {
        return this.getToken(SyslParser.SYSL_COMMENT, i);
    }
};


TableContext.prototype.attribs_or_modifiers = function() {
    return this.getTypedRuleContext(Attribs_or_modifiersContext,0);
};

TableContext.prototype.field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldContext);
    } else {
        return this.getTypedRuleContext(FieldContext,i);
    }
};

TableContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

TableContext.prototype.inplace_table = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Inplace_tableContext);
    } else {
        return this.getTypedRuleContext(Inplace_tableContext,i);
    }
};

TableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterTable(this);
	}
};

TableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitTable(this);
	}
};




SyslParser.TableContext = TableContext;

SyslParser.prototype.table = function() {

    var localctx = new TableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SyslParser.RULE_table);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 375;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SyslParser.SYSL_COMMENT) {
            this.state = 372;
            this.match(SyslParser.SYSL_COMMENT);
            this.state = 377;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 378;
        _la = this._input.LA(1);
        if(!(_la===SyslParser.TABLE || _la===SyslParser.TYPE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 379;
        this.name_str();
        this.state = 381;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.SQ_OPEN) {
            this.state = 380;
            this.attribs_or_modifiers();
        }

        this.state = 383;
        this.match(SyslParser.COLON);
        this.state = 396;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SyslParser.WHATEVER:
            this.state = 384;
            this.match(SyslParser.WHATEVER);
            break;
        case SyslParser.INDENT:
            this.state = 385;
            this.match(SyslParser.INDENT);
            this.state = 391; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 391;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 386;
                    this.match(SyslParser.SYSL_COMMENT);
                    break;

                case 2:
                    this.state = 387;
                    this.field();
                    break;

                case 3:
                    this.state = 388;
                    this.annotation();
                    break;

                case 4:
                    this.state = 389;
                    this.inplace_table();
                    break;

                case 5:
                    this.state = 390;
                    this.match(SyslParser.WHATEVER);
                    break;

                }
                this.state = 393; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SyslParser.TABLE) | (1 << SyslParser.TYPE) | (1 << SyslParser.WHATEVER))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SyslParser.AT - 38)) | (1 << (SyslParser.SYSL_COMMENT - 38)) | (1 << (SyslParser.TEXT_LINE - 38)) | (1 << (SyslParser.Name - 38)))) !== 0));
            this.state = 395;
            this.match(SyslParser.DEDENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Package_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_package_name;
    return this;
}

Package_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Package_nameContext.prototype.constructor = Package_nameContext;

Package_nameContext.prototype.name_str = function() {
    return this.getTypedRuleContext(Name_strContext,0);
};

Package_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterPackage_name(this);
	}
};

Package_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitPackage_name(this);
	}
};




SyslParser.Package_nameContext = Package_nameContext;

SyslParser.prototype.package_name = function() {

    var localctx = new Package_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SyslParser.RULE_package_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 398;
        this.name_str();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sub_packageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_sub_package;
    return this;
}

Sub_packageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sub_packageContext.prototype.constructor = Sub_packageContext;

Sub_packageContext.prototype.NAME_SEP = function() {
    return this.getToken(SyslParser.NAME_SEP, 0);
};

Sub_packageContext.prototype.package_name = function() {
    return this.getTypedRuleContext(Package_nameContext,0);
};

Sub_packageContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterSub_package(this);
	}
};

Sub_packageContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitSub_package(this);
	}
};




SyslParser.Sub_packageContext = Sub_packageContext;

SyslParser.prototype.sub_package = function() {

    var localctx = new Sub_packageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SyslParser.RULE_sub_package);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 400;
        this.match(SyslParser.NAME_SEP);
        this.state = 401;
        this.package_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function App_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_app_name;
    return this;
}

App_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
App_nameContext.prototype.constructor = App_nameContext;

App_nameContext.prototype.package_name = function() {
    return this.getTypedRuleContext(Package_nameContext,0);
};

App_nameContext.prototype.sub_package = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sub_packageContext);
    } else {
        return this.getTypedRuleContext(Sub_packageContext,i);
    }
};

App_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterApp_name(this);
	}
};

App_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitApp_name(this);
	}
};




SyslParser.App_nameContext = App_nameContext;

SyslParser.prototype.app_name = function() {

    var localctx = new App_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SyslParser.RULE_app_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 403;
        this.package_name();
        this.state = 407;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SyslParser.NAME_SEP) {
            this.state = 404;
            this.sub_package();
            this.state = 409;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Name_with_attribsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_name_with_attribs;
    return this;
}

Name_with_attribsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Name_with_attribsContext.prototype.constructor = Name_with_attribsContext;

Name_with_attribsContext.prototype.app_name = function() {
    return this.getTypedRuleContext(App_nameContext,0);
};

Name_with_attribsContext.prototype.QSTRING = function() {
    return this.getToken(SyslParser.QSTRING, 0);
};

Name_with_attribsContext.prototype.attribs_or_modifiers = function() {
    return this.getTypedRuleContext(Attribs_or_modifiersContext,0);
};

Name_with_attribsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterName_with_attribs(this);
	}
};

Name_with_attribsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitName_with_attribs(this);
	}
};




SyslParser.Name_with_attribsContext = Name_with_attribsContext;

SyslParser.prototype.name_with_attribs = function() {

    var localctx = new Name_with_attribsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SyslParser.RULE_name_with_attribs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 410;
        this.app_name();
        this.state = 412;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.QSTRING) {
            this.state = 411;
            this.match(SyslParser.QSTRING);
        }

        this.state = 415;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.SQ_OPEN) {
            this.state = 414;
            this.attribs_or_modifiers();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Model_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_model_name;
    return this;
}

Model_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Model_nameContext.prototype.constructor = Model_nameContext;

Model_nameContext.prototype.Name = function() {
    return this.getToken(SyslParser.Name, 0);
};

Model_nameContext.prototype.COLON = function() {
    return this.getToken(SyslParser.COLON, 0);
};

Model_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterModel_name(this);
	}
};

Model_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitModel_name(this);
	}
};




SyslParser.Model_nameContext = Model_nameContext;

SyslParser.prototype.model_name = function() {

    var localctx = new Model_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SyslParser.RULE_model_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 417;
        this.match(SyslParser.Name);
        this.state = 418;
        this.match(SyslParser.COLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Inplace_table_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_inplace_table_def;
    return this;
}

Inplace_table_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Inplace_table_defContext.prototype.constructor = Inplace_table_defContext;

Inplace_table_defContext.prototype.COLON = function() {
    return this.getToken(SyslParser.COLON, 0);
};

Inplace_table_defContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

Inplace_table_defContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

Inplace_table_defContext.prototype.Name = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.Name);
    } else {
        return this.getToken(SyslParser.Name, i);
    }
};


Inplace_table_defContext.prototype.attribs_or_modifiers = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attribs_or_modifiersContext);
    } else {
        return this.getTypedRuleContext(Attribs_or_modifiersContext,i);
    }
};

Inplace_table_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterInplace_table_def(this);
	}
};

Inplace_table_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitInplace_table_def(this);
	}
};




SyslParser.Inplace_table_defContext = Inplace_table_defContext;

SyslParser.prototype.inplace_table_def = function() {

    var localctx = new Inplace_table_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SyslParser.RULE_inplace_table_def);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 420;
        this.match(SyslParser.COLON);
        this.state = 421;
        this.match(SyslParser.INDENT);
        this.state = 426; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 422;
            this.match(SyslParser.Name);
            this.state = 424;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SyslParser.SQ_OPEN) {
                this.state = 423;
                this.attribs_or_modifiers();
            }

            this.state = 428; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SyslParser.Name);
        this.state = 430;
        this.match(SyslParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_refsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_table_refs;
    return this;
}

Table_refsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_refsContext.prototype.constructor = Table_refsContext;

Table_refsContext.prototype.Name = function() {
    return this.getToken(SyslParser.Name, 0);
};

Table_refsContext.prototype.TABLE = function() {
    return this.getToken(SyslParser.TABLE, 0);
};

Table_refsContext.prototype.TYPE = function() {
    return this.getToken(SyslParser.TYPE, 0);
};

Table_refsContext.prototype.inplace_table_def = function() {
    return this.getTypedRuleContext(Inplace_table_defContext,0);
};

Table_refsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterTable_refs(this);
	}
};

Table_refsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitTable_refs(this);
	}
};




SyslParser.Table_refsContext = Table_refsContext;

SyslParser.prototype.table_refs = function() {

    var localctx = new Table_refsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SyslParser.RULE_table_refs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 432;
        _la = this._input.LA(1);
        if(!(_la===SyslParser.TABLE || _la===SyslParser.TYPE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 433;
        this.match(SyslParser.Name);
        this.state = 435;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.COLON) {
            this.state = 434;
            this.inplace_table_def();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FacadeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_facade;
    return this;
}

FacadeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FacadeContext.prototype.constructor = FacadeContext;

FacadeContext.prototype.WRAP = function() {
    return this.getToken(SyslParser.WRAP, 0);
};

FacadeContext.prototype.model_name = function() {
    return this.getTypedRuleContext(Model_nameContext,0);
};

FacadeContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

FacadeContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

FacadeContext.prototype.SYSL_COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.SYSL_COMMENT);
    } else {
        return this.getToken(SyslParser.SYSL_COMMENT, i);
    }
};


FacadeContext.prototype.table_refs = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_refsContext);
    } else {
        return this.getTypedRuleContext(Table_refsContext,i);
    }
};

FacadeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterFacade(this);
	}
};

FacadeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitFacade(this);
	}
};




SyslParser.FacadeContext = FacadeContext;

SyslParser.prototype.facade = function() {

    var localctx = new FacadeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SyslParser.RULE_facade);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 440;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SyslParser.SYSL_COMMENT) {
            this.state = 437;
            this.match(SyslParser.SYSL_COMMENT);
            this.state = 442;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 443;
        this.match(SyslParser.WRAP);
        this.state = 444;
        this.model_name();
        this.state = 445;
        this.match(SyslParser.INDENT);
        this.state = 447; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 446;
            this.table_refs();
            this.state = 449; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SyslParser.TABLE || _la===SyslParser.TYPE);
        this.state = 451;
        this.match(SyslParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Documentation_stmtsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_documentation_stmts;
    return this;
}

Documentation_stmtsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Documentation_stmtsContext.prototype.constructor = Documentation_stmtsContext;

Documentation_stmtsContext.prototype.AT = function() {
    return this.getToken(SyslParser.AT, 0);
};

Documentation_stmtsContext.prototype.Name = function() {
    return this.getToken(SyslParser.Name, 0);
};

Documentation_stmtsContext.prototype.EQ = function() {
    return this.getToken(SyslParser.EQ, 0);
};

Documentation_stmtsContext.prototype.QSTRING = function() {
    return this.getToken(SyslParser.QSTRING, 0);
};

Documentation_stmtsContext.prototype.NEWLINE = function() {
    return this.getToken(SyslParser.NEWLINE, 0);
};

Documentation_stmtsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterDocumentation_stmts(this);
	}
};

Documentation_stmtsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitDocumentation_stmts(this);
	}
};




SyslParser.Documentation_stmtsContext = Documentation_stmtsContext;

SyslParser.prototype.documentation_stmts = function() {

    var localctx = new Documentation_stmtsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SyslParser.RULE_documentation_stmts);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 453;
        this.match(SyslParser.AT);
        this.state = 454;
        this.match(SyslParser.Name);
        this.state = 455;
        this.match(SyslParser.EQ);
        this.state = 456;
        this.match(SyslParser.QSTRING);
        this.state = 457;
        this.match(SyslParser.NEWLINE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Var_in_curlyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_var_in_curly;
    return this;
}

Var_in_curlyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Var_in_curlyContext.prototype.constructor = Var_in_curlyContext;

Var_in_curlyContext.prototype.CURLY_OPEN = function() {
    return this.getToken(SyslParser.CURLY_OPEN, 0);
};

Var_in_curlyContext.prototype.Name = function() {
    return this.getToken(SyslParser.Name, 0);
};

Var_in_curlyContext.prototype.CURLY_CLOSE = function() {
    return this.getToken(SyslParser.CURLY_CLOSE, 0);
};

Var_in_curlyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterVar_in_curly(this);
	}
};

Var_in_curlyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitVar_in_curly(this);
	}
};




SyslParser.Var_in_curlyContext = Var_in_curlyContext;

SyslParser.prototype.var_in_curly = function() {

    var localctx = new Var_in_curlyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SyslParser.RULE_var_in_curly);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 459;
        this.match(SyslParser.CURLY_OPEN);
        this.state = 460;
        this.match(SyslParser.Name);
        this.state = 461;
        this.match(SyslParser.CURLY_CLOSE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_varContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_query_var;
    return this;
}

Query_varContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_varContext.prototype.constructor = Query_varContext;

Query_varContext.prototype.Name = function() {
    return this.getToken(SyslParser.Name, 0);
};

Query_varContext.prototype.EQ = function() {
    return this.getToken(SyslParser.EQ, 0);
};

Query_varContext.prototype.NativeDataTypes = function() {
    return this.getToken(SyslParser.NativeDataTypes, 0);
};

Query_varContext.prototype.name_str = function() {
    return this.getTypedRuleContext(Name_strContext,0);
};

Query_varContext.prototype.var_in_curly = function() {
    return this.getTypedRuleContext(Var_in_curlyContext,0);
};

Query_varContext.prototype.QN = function() {
    return this.getToken(SyslParser.QN, 0);
};

Query_varContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterQuery_var(this);
	}
};

Query_varContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitQuery_var(this);
	}
};




SyslParser.Query_varContext = Query_varContext;

SyslParser.prototype.query_var = function() {

    var localctx = new Query_varContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SyslParser.RULE_query_var);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 463;
        this.match(SyslParser.Name);
        this.state = 464;
        this.match(SyslParser.EQ);
        this.state = 468;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SyslParser.NativeDataTypes:
            this.state = 465;
            this.match(SyslParser.NativeDataTypes);
            break;
        case SyslParser.TEXT_LINE:
        case SyslParser.Name:
            this.state = 466;
            this.name_str();
            break;
        case SyslParser.CURLY_OPEN:
            this.state = 467;
            this.var_in_curly();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 471;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.QN) {
            this.state = 470;
            this.match(SyslParser.QN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_query_param;
    return this;
}

Query_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_paramContext.prototype.constructor = Query_paramContext;

Query_paramContext.prototype.QN = function() {
    return this.getToken(SyslParser.QN, 0);
};

Query_paramContext.prototype.query_var = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Query_varContext);
    } else {
        return this.getTypedRuleContext(Query_varContext,i);
    }
};

Query_paramContext.prototype.AMP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.AMP);
    } else {
        return this.getToken(SyslParser.AMP, i);
    }
};


Query_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterQuery_param(this);
	}
};

Query_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitQuery_param(this);
	}
};




SyslParser.Query_paramContext = Query_paramContext;

SyslParser.prototype.query_param = function() {

    var localctx = new Query_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SyslParser.RULE_query_param);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 473;
        this.match(SyslParser.QN);
        this.state = 474;
        this.query_var();
        this.state = 479;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SyslParser.AMP) {
            this.state = 475;
            this.match(SyslParser.AMP);
            this.state = 476;
            this.query_var();
            this.state = 481;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Http_path_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_http_path_part;
    return this;
}

Http_path_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Http_path_partContext.prototype.constructor = Http_path_partContext;

Http_path_partContext.prototype.name_str = function() {
    return this.getTypedRuleContext(Name_strContext,0);
};

Http_path_partContext.prototype.DIGITS = function() {
    return this.getToken(SyslParser.DIGITS, 0);
};

Http_path_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterHttp_path_part(this);
	}
};

Http_path_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitHttp_path_part(this);
	}
};




SyslParser.Http_path_partContext = Http_path_partContext;

SyslParser.prototype.http_path_part = function() {

    var localctx = new Http_path_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, SyslParser.RULE_http_path_part);
    try {
        this.state = 484;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SyslParser.TEXT_LINE:
        case SyslParser.Name:
            this.enterOuterAlt(localctx, 1);
            this.state = 482;
            this.name_str();
            break;
        case SyslParser.DIGITS:
            this.enterOuterAlt(localctx, 2);
            this.state = 483;
            this.match(SyslParser.DIGITS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Http_path_var_with_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_http_path_var_with_type;
    return this;
}

Http_path_var_with_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Http_path_var_with_typeContext.prototype.constructor = Http_path_var_with_typeContext;

Http_path_var_with_typeContext.prototype.CURLY_OPEN = function() {
    return this.getToken(SyslParser.CURLY_OPEN, 0);
};

Http_path_var_with_typeContext.prototype.http_path_part = function() {
    return this.getTypedRuleContext(Http_path_partContext,0);
};

Http_path_var_with_typeContext.prototype.LESS_COLON = function() {
    return this.getToken(SyslParser.LESS_COLON, 0);
};

Http_path_var_with_typeContext.prototype.CURLY_CLOSE = function() {
    return this.getToken(SyslParser.CURLY_CLOSE, 0);
};

Http_path_var_with_typeContext.prototype.NativeDataTypes = function() {
    return this.getToken(SyslParser.NativeDataTypes, 0);
};

Http_path_var_with_typeContext.prototype.name_str = function() {
    return this.getTypedRuleContext(Name_strContext,0);
};

Http_path_var_with_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterHttp_path_var_with_type(this);
	}
};

Http_path_var_with_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitHttp_path_var_with_type(this);
	}
};




SyslParser.Http_path_var_with_typeContext = Http_path_var_with_typeContext;

SyslParser.prototype.http_path_var_with_type = function() {

    var localctx = new Http_path_var_with_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SyslParser.RULE_http_path_var_with_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 486;
        this.match(SyslParser.CURLY_OPEN);
        this.state = 487;
        this.http_path_part();
        this.state = 488;
        this.match(SyslParser.LESS_COLON);
        this.state = 491;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SyslParser.NativeDataTypes:
            this.state = 489;
            this.match(SyslParser.NativeDataTypes);
            break;
        case SyslParser.TEXT_LINE:
        case SyslParser.Name:
            this.state = 490;
            this.name_str();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 493;
        this.match(SyslParser.CURLY_CLOSE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Http_path_staticContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_http_path_static;
    return this;
}

Http_path_staticContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Http_path_staticContext.prototype.constructor = Http_path_staticContext;

Http_path_staticContext.prototype.http_path_part = function() {
    return this.getTypedRuleContext(Http_path_partContext,0);
};

Http_path_staticContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterHttp_path_static(this);
	}
};

Http_path_staticContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitHttp_path_static(this);
	}
};




SyslParser.Http_path_staticContext = Http_path_staticContext;

SyslParser.prototype.http_path_static = function() {

    var localctx = new Http_path_staticContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SyslParser.RULE_http_path_static);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 495;
        this.http_path_part();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Http_path_suffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_http_path_suffix;
    return this;
}

Http_path_suffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Http_path_suffixContext.prototype.constructor = Http_path_suffixContext;

Http_path_suffixContext.prototype.FORWARD_SLASH = function() {
    return this.getToken(SyslParser.FORWARD_SLASH, 0);
};

Http_path_suffixContext.prototype.http_path_static = function() {
    return this.getTypedRuleContext(Http_path_staticContext,0);
};

Http_path_suffixContext.prototype.http_path_var_with_type = function() {
    return this.getTypedRuleContext(Http_path_var_with_typeContext,0);
};

Http_path_suffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterHttp_path_suffix(this);
	}
};

Http_path_suffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitHttp_path_suffix(this);
	}
};




SyslParser.Http_path_suffixContext = Http_path_suffixContext;

SyslParser.prototype.http_path_suffix = function() {

    var localctx = new Http_path_suffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SyslParser.RULE_http_path_suffix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 497;
        this.match(SyslParser.FORWARD_SLASH);
        this.state = 500;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SyslParser.DIGITS:
        case SyslParser.TEXT_LINE:
        case SyslParser.Name:
            this.state = 498;
            this.http_path_static();
            break;
        case SyslParser.CURLY_OPEN:
            this.state = 499;
            this.http_path_var_with_type();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Http_pathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_http_path;
    return this;
}

Http_pathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Http_pathContext.prototype.constructor = Http_pathContext;

Http_pathContext.prototype.FORWARD_SLASH = function() {
    return this.getToken(SyslParser.FORWARD_SLASH, 0);
};

Http_pathContext.prototype.query_param = function() {
    return this.getTypedRuleContext(Query_paramContext,0);
};

Http_pathContext.prototype.http_path_suffix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Http_path_suffixContext);
    } else {
        return this.getTypedRuleContext(Http_path_suffixContext,i);
    }
};

Http_pathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterHttp_path(this);
	}
};

Http_pathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitHttp_path(this);
	}
};




SyslParser.Http_pathContext = Http_pathContext;

SyslParser.prototype.http_path = function() {

    var localctx = new Http_pathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SyslParser.RULE_http_path);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 508;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
        switch(la_) {
        case 1:
            this.state = 502;
            this.match(SyslParser.FORWARD_SLASH);
            break;

        case 2:
            this.state = 504; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 503;
                this.http_path_suffix();
                this.state = 506; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SyslParser.FORWARD_SLASH);
            break;

        }
        this.state = 511;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.QN) {
            this.state = 510;
            this.query_param();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Endpoint_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_endpoint_name;
    return this;
}

Endpoint_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Endpoint_nameContext.prototype.constructor = Endpoint_nameContext;

Endpoint_nameContext.prototype.name_str = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Name_strContext);
    } else {
        return this.getTypedRuleContext(Name_strContext,i);
    }
};

Endpoint_nameContext.prototype.FORWARD_SLASH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.FORWARD_SLASH);
    } else {
        return this.getToken(SyslParser.FORWARD_SLASH, i);
    }
};


Endpoint_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterEndpoint_name(this);
	}
};

Endpoint_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitEndpoint_name(this);
	}
};




SyslParser.Endpoint_nameContext = Endpoint_nameContext;

SyslParser.prototype.endpoint_name = function() {

    var localctx = new Endpoint_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SyslParser.RULE_endpoint_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 513;
        this.name_str();
        this.state = 518;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SyslParser.FORWARD_SLASH) {
            this.state = 514;
            this.match(SyslParser.FORWARD_SLASH);
            this.state = 515;
            this.name_str();
            this.state = 520;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ret_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_ret_stmt;
    return this;
}

Ret_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ret_stmtContext.prototype.constructor = Ret_stmtContext;

Ret_stmtContext.prototype.RETURN = function() {
    return this.getToken(SyslParser.RETURN, 0);
};

Ret_stmtContext.prototype.TEXT = function() {
    return this.getToken(SyslParser.TEXT, 0);
};

Ret_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterRet_stmt(this);
	}
};

Ret_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitRet_stmt(this);
	}
};




SyslParser.Ret_stmtContext = Ret_stmtContext;

SyslParser.prototype.ret_stmt = function() {

    var localctx = new Ret_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SyslParser.RULE_ret_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 521;
        this.match(SyslParser.RETURN);
        this.state = 522;
        this.match(SyslParser.TEXT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TargetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_target;
    return this;
}

TargetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TargetContext.prototype.constructor = TargetContext;

TargetContext.prototype.app_name = function() {
    return this.getTypedRuleContext(App_nameContext,0);
};

TargetContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterTarget(this);
	}
};

TargetContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitTarget(this);
	}
};




SyslParser.TargetContext = TargetContext;

SyslParser.prototype.target = function() {

    var localctx = new TargetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SyslParser.RULE_target);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 524;
        this.app_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Target_endpointContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_target_endpoint;
    return this;
}

Target_endpointContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Target_endpointContext.prototype.constructor = Target_endpointContext;

Target_endpointContext.prototype.name_str = function() {
    return this.getTypedRuleContext(Name_strContext,0);
};

Target_endpointContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterTarget_endpoint(this);
	}
};

Target_endpointContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitTarget_endpoint(this);
	}
};




SyslParser.Target_endpointContext = Target_endpointContext;

SyslParser.prototype.target_endpoint = function() {

    var localctx = new Target_endpointContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SyslParser.RULE_target_endpoint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 526;
        this.name_str();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Call_argContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_call_arg;
    return this;
}

Call_argContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_argContext.prototype.constructor = Call_argContext;

Call_argContext.prototype.QSTRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.QSTRING);
    } else {
        return this.getToken(SyslParser.QSTRING, i);
    }
};


Call_argContext.prototype.name_str = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Name_strContext);
    } else {
        return this.getTypedRuleContext(Name_strContext,i);
    }
};

Call_argContext.prototype.LESS_COLON = function() {
    return this.getToken(SyslParser.LESS_COLON, 0);
};

Call_argContext.prototype.NativeDataTypes = function() {
    return this.getToken(SyslParser.NativeDataTypes, 0);
};

Call_argContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterCall_arg(this);
	}
};

Call_argContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitCall_arg(this);
	}
};




SyslParser.Call_argContext = Call_argContext;

SyslParser.prototype.call_arg = function() {

    var localctx = new Call_argContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SyslParser.RULE_call_arg);
    var _la = 0; // Token type
    try {
        this.state = 540;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 530; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 530;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case SyslParser.QSTRING:
                    this.state = 528;
                    this.match(SyslParser.QSTRING);
                    break;
                case SyslParser.TEXT_LINE:
                case SyslParser.Name:
                    this.state = 529;
                    this.name_str();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 532; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (SyslParser.QSTRING - 52)) | (1 << (SyslParser.TEXT_LINE - 52)) | (1 << (SyslParser.Name - 52)))) !== 0));
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 534;
            this.name_str();
            this.state = 535;
            this.match(SyslParser.LESS_COLON);
            this.state = 538;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SyslParser.TEXT_LINE:
            case SyslParser.Name:
                this.state = 536;
                this.name_str();
                break;
            case SyslParser.NativeDataTypes:
                this.state = 537;
                this.match(SyslParser.NativeDataTypes);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Call_argsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_call_args;
    return this;
}

Call_argsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_argsContext.prototype.constructor = Call_argsContext;

Call_argsContext.prototype.OPEN_PAREN = function() {
    return this.getToken(SyslParser.OPEN_PAREN, 0);
};

Call_argsContext.prototype.call_arg = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Call_argContext);
    } else {
        return this.getTypedRuleContext(Call_argContext,i);
    }
};

Call_argsContext.prototype.CLOSE_PAREN = function() {
    return this.getToken(SyslParser.CLOSE_PAREN, 0);
};

Call_argsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.COMMA);
    } else {
        return this.getToken(SyslParser.COMMA, i);
    }
};


Call_argsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterCall_args(this);
	}
};

Call_argsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitCall_args(this);
	}
};




SyslParser.Call_argsContext = Call_argsContext;

SyslParser.prototype.call_args = function() {

    var localctx = new Call_argsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SyslParser.RULE_call_args);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 542;
        this.match(SyslParser.OPEN_PAREN);
        this.state = 543;
        this.call_arg();
        this.state = 548;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SyslParser.COMMA) {
            this.state = 544;
            this.match(SyslParser.COMMA);
            this.state = 545;
            this.call_arg();
            this.state = 550;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 551;
        this.match(SyslParser.CLOSE_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Call_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_call_stmt;
    return this;
}

Call_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Call_stmtContext.prototype.constructor = Call_stmtContext;

Call_stmtContext.prototype.target_endpoint = function() {
    return this.getTypedRuleContext(Target_endpointContext,0);
};

Call_stmtContext.prototype.DOT_ARROW = function() {
    return this.getToken(SyslParser.DOT_ARROW, 0);
};

Call_stmtContext.prototype.target = function() {
    return this.getTypedRuleContext(TargetContext,0);
};

Call_stmtContext.prototype.ARROW_LEFT = function() {
    return this.getToken(SyslParser.ARROW_LEFT, 0);
};

Call_stmtContext.prototype.call_args = function() {
    return this.getTypedRuleContext(Call_argsContext,0);
};

Call_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterCall_stmt(this);
	}
};

Call_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitCall_stmt(this);
	}
};




SyslParser.Call_stmtContext = Call_stmtContext;

SyslParser.prototype.call_stmt = function() {

    var localctx = new Call_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SyslParser.RULE_call_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 557;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SyslParser.DOT_ARROW:
            this.state = 553;
            this.match(SyslParser.DOT_ARROW);
            break;
        case SyslParser.TEXT_LINE:
        case SyslParser.Name:
            this.state = 554;
            this.target();
            this.state = 555;
            this.match(SyslParser.ARROW_LEFT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 559;
        this.target_endpoint();
        this.state = 561;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.OPEN_PAREN) {
            this.state = 560;
            this.call_args();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_if_stmt;
    return this;
}

If_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_stmtContext.prototype.constructor = If_stmtContext;

If_stmtContext.prototype.IF = function() {
    return this.getToken(SyslParser.IF, 0);
};

If_stmtContext.prototype.PREDICATE_VALUE = function() {
    return this.getToken(SyslParser.PREDICATE_VALUE, 0);
};

If_stmtContext.prototype.COLON = function() {
    return this.getToken(SyslParser.COLON, 0);
};

If_stmtContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

If_stmtContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

If_stmtContext.prototype.statements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementsContext);
    } else {
        return this.getTypedRuleContext(StatementsContext,i);
    }
};

If_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterIf_stmt(this);
	}
};

If_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitIf_stmt(this);
	}
};




SyslParser.If_stmtContext = If_stmtContext;

SyslParser.prototype.if_stmt = function() {

    var localctx = new If_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SyslParser.RULE_if_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 563;
        this.match(SyslParser.IF);
        this.state = 564;
        this.match(SyslParser.PREDICATE_VALUE);
        this.state = 565;
        this.match(SyslParser.COLON);
        this.state = 566;
        this.match(SyslParser.INDENT);
        this.state = 570;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SyslParser.RETURN) | (1 << SyslParser.IF) | (1 << SyslParser.FOR_EACH) | (1 << SyslParser.FOR) | (1 << SyslParser.UNTIL) | (1 << SyslParser.LOOP) | (1 << SyslParser.ALT) | (1 << SyslParser.WHILE) | (1 << SyslParser.WHATEVER) | (1 << SyslParser.ONE_OF) | (1 << SyslParser.DOT_ARROW))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SyslParser.AT - 38)) | (1 << (SyslParser.PIPE - 38)) | (1 << (SyslParser.QSTRING - 38)) | (1 << (SyslParser.SYSL_COMMENT - 38)) | (1 << (SyslParser.TEXT_LINE - 38)) | (1 << (SyslParser.Name - 38)))) !== 0)) {
            this.state = 567;
            this.statements();
            this.state = 572;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 573;
        this.match(SyslParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Else_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_else_stmt;
    return this;
}

Else_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Else_stmtContext.prototype.constructor = Else_stmtContext;

Else_stmtContext.prototype.ELSE = function() {
    return this.getToken(SyslParser.ELSE, 0);
};

Else_stmtContext.prototype.COLON = function() {
    return this.getToken(SyslParser.COLON, 0);
};

Else_stmtContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

Else_stmtContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

Else_stmtContext.prototype.PREDICATE_VALUE = function() {
    return this.getToken(SyslParser.PREDICATE_VALUE, 0);
};

Else_stmtContext.prototype.statements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementsContext);
    } else {
        return this.getTypedRuleContext(StatementsContext,i);
    }
};

Else_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterElse_stmt(this);
	}
};

Else_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitElse_stmt(this);
	}
};




SyslParser.Else_stmtContext = Else_stmtContext;

SyslParser.prototype.else_stmt = function() {

    var localctx = new Else_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SyslParser.RULE_else_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 575;
        this.match(SyslParser.ELSE);
        this.state = 577;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.PREDICATE_VALUE) {
            this.state = 576;
            this.match(SyslParser.PREDICATE_VALUE);
        }

        this.state = 579;
        this.match(SyslParser.COLON);
        this.state = 580;
        this.match(SyslParser.INDENT);
        this.state = 584;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SyslParser.RETURN) | (1 << SyslParser.IF) | (1 << SyslParser.FOR_EACH) | (1 << SyslParser.FOR) | (1 << SyslParser.UNTIL) | (1 << SyslParser.LOOP) | (1 << SyslParser.ALT) | (1 << SyslParser.WHILE) | (1 << SyslParser.WHATEVER) | (1 << SyslParser.ONE_OF) | (1 << SyslParser.DOT_ARROW))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SyslParser.AT - 38)) | (1 << (SyslParser.PIPE - 38)) | (1 << (SyslParser.QSTRING - 38)) | (1 << (SyslParser.SYSL_COMMENT - 38)) | (1 << (SyslParser.TEXT_LINE - 38)) | (1 << (SyslParser.Name - 38)))) !== 0)) {
            this.state = 581;
            this.statements();
            this.state = 586;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 587;
        this.match(SyslParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_elseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_if_else;
    return this;
}

If_elseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_elseContext.prototype.constructor = If_elseContext;

If_elseContext.prototype.if_stmt = function() {
    return this.getTypedRuleContext(If_stmtContext,0);
};

If_elseContext.prototype.else_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Else_stmtContext);
    } else {
        return this.getTypedRuleContext(Else_stmtContext,i);
    }
};

If_elseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterIf_else(this);
	}
};

If_elseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitIf_else(this);
	}
};




SyslParser.If_elseContext = If_elseContext;

SyslParser.prototype.if_else = function() {

    var localctx = new If_elseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SyslParser.RULE_if_else);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 589;
        this.if_stmt();
        this.state = 593;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SyslParser.ELSE) {
            this.state = 590;
            this.else_stmt();
            this.state = 595;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_for_stmt;
    return this;
}

For_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_stmtContext.prototype.constructor = For_stmtContext;

For_stmtContext.prototype.PREDICATE_VALUE = function() {
    return this.getToken(SyslParser.PREDICATE_VALUE, 0);
};

For_stmtContext.prototype.COLON = function() {
    return this.getToken(SyslParser.COLON, 0);
};

For_stmtContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

For_stmtContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

For_stmtContext.prototype.ALT = function() {
    return this.getToken(SyslParser.ALT, 0);
};

For_stmtContext.prototype.UNTIL = function() {
    return this.getToken(SyslParser.UNTIL, 0);
};

For_stmtContext.prototype.FOR_EACH = function() {
    return this.getToken(SyslParser.FOR_EACH, 0);
};

For_stmtContext.prototype.FOR = function() {
    return this.getToken(SyslParser.FOR, 0);
};

For_stmtContext.prototype.LOOP = function() {
    return this.getToken(SyslParser.LOOP, 0);
};

For_stmtContext.prototype.WHILE = function() {
    return this.getToken(SyslParser.WHILE, 0);
};

For_stmtContext.prototype.statements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementsContext);
    } else {
        return this.getTypedRuleContext(StatementsContext,i);
    }
};

For_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterFor_stmt(this);
	}
};

For_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitFor_stmt(this);
	}
};




SyslParser.For_stmtContext = For_stmtContext;

SyslParser.prototype.for_stmt = function() {

    var localctx = new For_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SyslParser.RULE_for_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 596;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SyslParser.FOR_EACH) | (1 << SyslParser.FOR) | (1 << SyslParser.UNTIL) | (1 << SyslParser.LOOP) | (1 << SyslParser.ALT) | (1 << SyslParser.WHILE))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 597;
        this.match(SyslParser.PREDICATE_VALUE);
        this.state = 598;
        this.match(SyslParser.COLON);
        this.state = 599;
        this.match(SyslParser.INDENT);
        this.state = 603;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SyslParser.RETURN) | (1 << SyslParser.IF) | (1 << SyslParser.FOR_EACH) | (1 << SyslParser.FOR) | (1 << SyslParser.UNTIL) | (1 << SyslParser.LOOP) | (1 << SyslParser.ALT) | (1 << SyslParser.WHILE) | (1 << SyslParser.WHATEVER) | (1 << SyslParser.ONE_OF) | (1 << SyslParser.DOT_ARROW))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SyslParser.AT - 38)) | (1 << (SyslParser.PIPE - 38)) | (1 << (SyslParser.QSTRING - 38)) | (1 << (SyslParser.SYSL_COMMENT - 38)) | (1 << (SyslParser.TEXT_LINE - 38)) | (1 << (SyslParser.Name - 38)))) !== 0)) {
            this.state = 600;
            this.statements();
            this.state = 605;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 606;
        this.match(SyslParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Http_method_commentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_http_method_comment;
    return this;
}

Http_method_commentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Http_method_commentContext.prototype.constructor = Http_method_commentContext;

Http_method_commentContext.prototype.SYSL_COMMENT = function() {
    return this.getToken(SyslParser.SYSL_COMMENT, 0);
};

Http_method_commentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterHttp_method_comment(this);
	}
};

Http_method_commentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitHttp_method_comment(this);
	}
};




SyslParser.Http_method_commentContext = Http_method_commentContext;

SyslParser.prototype.http_method_comment = function() {

    var localctx = new Http_method_commentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SyslParser.RULE_http_method_comment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 608;
        this.match(SyslParser.SYSL_COMMENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_group_stmt;
    return this;
}

Group_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_stmtContext.prototype.constructor = Group_stmtContext;

Group_stmtContext.prototype.name_str = function() {
    return this.getTypedRuleContext(Name_strContext,0);
};

Group_stmtContext.prototype.COLON = function() {
    return this.getToken(SyslParser.COLON, 0);
};

Group_stmtContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

Group_stmtContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

Group_stmtContext.prototype.statements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementsContext);
    } else {
        return this.getTypedRuleContext(StatementsContext,i);
    }
};

Group_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterGroup_stmt(this);
	}
};

Group_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitGroup_stmt(this);
	}
};




SyslParser.Group_stmtContext = Group_stmtContext;

SyslParser.prototype.group_stmt = function() {

    var localctx = new Group_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SyslParser.RULE_group_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 610;
        this.name_str();
        this.state = 611;
        this.match(SyslParser.COLON);
        this.state = 612;
        this.match(SyslParser.INDENT);
        this.state = 614; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 613;
            this.statements();
            this.state = 616; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SyslParser.RETURN) | (1 << SyslParser.IF) | (1 << SyslParser.FOR_EACH) | (1 << SyslParser.FOR) | (1 << SyslParser.UNTIL) | (1 << SyslParser.LOOP) | (1 << SyslParser.ALT) | (1 << SyslParser.WHILE) | (1 << SyslParser.WHATEVER) | (1 << SyslParser.ONE_OF) | (1 << SyslParser.DOT_ARROW))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SyslParser.AT - 38)) | (1 << (SyslParser.PIPE - 38)) | (1 << (SyslParser.QSTRING - 38)) | (1 << (SyslParser.SYSL_COMMENT - 38)) | (1 << (SyslParser.TEXT_LINE - 38)) | (1 << (SyslParser.Name - 38)))) !== 0));
        this.state = 618;
        this.match(SyslParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function One_of_case_labelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_one_of_case_label;
    return this;
}

One_of_case_labelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
One_of_case_labelContext.prototype.constructor = One_of_case_labelContext;

One_of_case_labelContext.prototype.Name = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.Name);
    } else {
        return this.getToken(SyslParser.Name, i);
    }
};


One_of_case_labelContext.prototype.TEXT_LINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.TEXT_LINE);
    } else {
        return this.getToken(SyslParser.TEXT_LINE, i);
    }
};


One_of_case_labelContext.prototype.QSTRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.QSTRING);
    } else {
        return this.getToken(SyslParser.QSTRING, i);
    }
};


One_of_case_labelContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterOne_of_case_label(this);
	}
};

One_of_case_labelContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitOne_of_case_label(this);
	}
};




SyslParser.One_of_case_labelContext = One_of_case_labelContext;

SyslParser.prototype.one_of_case_label = function() {

    var localctx = new One_of_case_labelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SyslParser.RULE_one_of_case_label);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 621; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 620;
            _la = this._input.LA(1);
            if(!(((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (SyslParser.QSTRING - 52)) | (1 << (SyslParser.TEXT_LINE - 52)) | (1 << (SyslParser.Name - 52)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 623; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (SyslParser.QSTRING - 52)) | (1 << (SyslParser.TEXT_LINE - 52)) | (1 << (SyslParser.Name - 52)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function One_of_casesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_one_of_cases;
    return this;
}

One_of_casesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
One_of_casesContext.prototype.constructor = One_of_casesContext;

One_of_casesContext.prototype.COLON = function() {
    return this.getToken(SyslParser.COLON, 0);
};

One_of_casesContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

One_of_casesContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

One_of_casesContext.prototype.one_of_case_label = function() {
    return this.getTypedRuleContext(One_of_case_labelContext,0);
};

One_of_casesContext.prototype.statements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementsContext);
    } else {
        return this.getTypedRuleContext(StatementsContext,i);
    }
};

One_of_casesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterOne_of_cases(this);
	}
};

One_of_casesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitOne_of_cases(this);
	}
};




SyslParser.One_of_casesContext = One_of_casesContext;

SyslParser.prototype.one_of_cases = function() {

    var localctx = new One_of_casesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SyslParser.RULE_one_of_cases);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 626;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (SyslParser.QSTRING - 52)) | (1 << (SyslParser.TEXT_LINE - 52)) | (1 << (SyslParser.Name - 52)))) !== 0)) {
            this.state = 625;
            this.one_of_case_label();
        }

        this.state = 628;
        this.match(SyslParser.COLON);
        this.state = 629;
        this.match(SyslParser.INDENT);
        this.state = 631; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 630;
            this.statements();
            this.state = 633; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SyslParser.RETURN) | (1 << SyslParser.IF) | (1 << SyslParser.FOR_EACH) | (1 << SyslParser.FOR) | (1 << SyslParser.UNTIL) | (1 << SyslParser.LOOP) | (1 << SyslParser.ALT) | (1 << SyslParser.WHILE) | (1 << SyslParser.WHATEVER) | (1 << SyslParser.ONE_OF) | (1 << SyslParser.DOT_ARROW))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SyslParser.AT - 38)) | (1 << (SyslParser.PIPE - 38)) | (1 << (SyslParser.QSTRING - 38)) | (1 << (SyslParser.SYSL_COMMENT - 38)) | (1 << (SyslParser.TEXT_LINE - 38)) | (1 << (SyslParser.Name - 38)))) !== 0));
        this.state = 635;
        this.match(SyslParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function One_of_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_one_of_stmt;
    return this;
}

One_of_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
One_of_stmtContext.prototype.constructor = One_of_stmtContext;

One_of_stmtContext.prototype.ONE_OF = function() {
    return this.getToken(SyslParser.ONE_OF, 0);
};

One_of_stmtContext.prototype.COLON = function() {
    return this.getToken(SyslParser.COLON, 0);
};

One_of_stmtContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

One_of_stmtContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

One_of_stmtContext.prototype.one_of_cases = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(One_of_casesContext);
    } else {
        return this.getTypedRuleContext(One_of_casesContext,i);
    }
};

One_of_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterOne_of_stmt(this);
	}
};

One_of_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitOne_of_stmt(this);
	}
};




SyslParser.One_of_stmtContext = One_of_stmtContext;

SyslParser.prototype.one_of_stmt = function() {

    var localctx = new One_of_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SyslParser.RULE_one_of_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 637;
        this.match(SyslParser.ONE_OF);
        this.state = 638;
        this.match(SyslParser.COLON);
        this.state = 639;
        this.match(SyslParser.INDENT);
        this.state = 641; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 640;
            this.one_of_cases();
            this.state = 643; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SyslParser.COLON - 35)) | (1 << (SyslParser.QSTRING - 35)) | (1 << (SyslParser.TEXT_LINE - 35)) | (1 << (SyslParser.Name - 35)))) !== 0));
        this.state = 645;
        this.match(SyslParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Text_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_text_stmt;
    return this;
}

Text_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Text_stmtContext.prototype.constructor = Text_stmtContext;

Text_stmtContext.prototype.doc_string = function() {
    return this.getTypedRuleContext(Doc_stringContext,0);
};

Text_stmtContext.prototype.QSTRING = function() {
    return this.getToken(SyslParser.QSTRING, 0);
};

Text_stmtContext.prototype.app_name = function() {
    return this.getTypedRuleContext(App_nameContext,0);
};

Text_stmtContext.prototype.ARROW_RIGHT = function() {
    return this.getToken(SyslParser.ARROW_RIGHT, 0);
};

Text_stmtContext.prototype.name_str = function() {
    return this.getTypedRuleContext(Name_strContext,0);
};

Text_stmtContext.prototype.WHATEVER = function() {
    return this.getToken(SyslParser.WHATEVER, 0);
};

Text_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterText_stmt(this);
	}
};

Text_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitText_stmt(this);
	}
};




SyslParser.Text_stmtContext = Text_stmtContext;

SyslParser.prototype.text_stmt = function() {

    var localctx = new Text_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SyslParser.RULE_text_stmt);
    var _la = 0; // Token type
    try {
        this.state = 655;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SyslParser.PIPE:
            this.enterOuterAlt(localctx, 1);
            this.state = 647;
            this.doc_string();
            break;
        case SyslParser.QSTRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 648;
            this.match(SyslParser.QSTRING);
            break;
        case SyslParser.TEXT_LINE:
        case SyslParser.Name:
            this.enterOuterAlt(localctx, 3);
            this.state = 649;
            this.app_name();
            this.state = 652;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SyslParser.ARROW_RIGHT) {
                this.state = 650;
                this.match(SyslParser.ARROW_RIGHT);
                this.state = 651;
                this.name_str();
            }

            break;
        case SyslParser.WHATEVER:
            this.enterOuterAlt(localctx, 4);
            this.state = 654;
            this.match(SyslParser.WHATEVER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MixinContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_mixin;
    return this;
}

MixinContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MixinContext.prototype.constructor = MixinContext;

MixinContext.prototype.MIXIN = function() {
    return this.getToken(SyslParser.MIXIN, 0);
};

MixinContext.prototype.app_name = function() {
    return this.getTypedRuleContext(App_nameContext,0);
};

MixinContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterMixin(this);
	}
};

MixinContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitMixin(this);
	}
};




SyslParser.MixinContext = MixinContext;

SyslParser.prototype.mixin = function() {

    var localctx = new MixinContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SyslParser.RULE_mixin);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 657;
        this.match(SyslParser.MIXIN);
        this.state = 658;
        this.app_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParamContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_param;
    return this;
}

ParamContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamContext.prototype.constructor = ParamContext;

ParamContext.prototype.reference = function() {
    return this.getTypedRuleContext(ReferenceContext,0);
};

ParamContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

ParamContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterParam(this);
	}
};

ParamContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitParam(this);
	}
};




SyslParser.ParamContext = ParamContext;

SyslParser.prototype.param = function() {

    var localctx = new ParamContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, SyslParser.RULE_param);
    try {
        this.state = 662;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 660;
            this.reference();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 661;
            this.field();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Param_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_param_list;
    return this;
}

Param_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Param_listContext.prototype.constructor = Param_listContext;

Param_listContext.prototype.param = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParamContext);
    } else {
        return this.getTypedRuleContext(ParamContext,i);
    }
};

Param_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.COMMA);
    } else {
        return this.getToken(SyslParser.COMMA, i);
    }
};


Param_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterParam_list(this);
	}
};

Param_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitParam_list(this);
	}
};




SyslParser.Param_listContext = Param_listContext;

SyslParser.prototype.param_list = function() {

    var localctx = new Param_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, SyslParser.RULE_param_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 664;
        this.param();
        this.state = 669;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SyslParser.COMMA) {
            this.state = 665;
            this.match(SyslParser.COMMA);
            this.state = 666;
            this.param();
            this.state = 671;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParamsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_params;
    return this;
}

ParamsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamsContext.prototype.constructor = ParamsContext;

ParamsContext.prototype.OPEN_PAREN = function() {
    return this.getToken(SyslParser.OPEN_PAREN, 0);
};

ParamsContext.prototype.param_list = function() {
    return this.getTypedRuleContext(Param_listContext,0);
};

ParamsContext.prototype.CLOSE_PAREN = function() {
    return this.getToken(SyslParser.CLOSE_PAREN, 0);
};

ParamsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterParams(this);
	}
};

ParamsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitParams(this);
	}
};




SyslParser.ParamsContext = ParamsContext;

SyslParser.prototype.params = function() {

    var localctx = new ParamsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, SyslParser.RULE_params);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 672;
        this.match(SyslParser.OPEN_PAREN);
        this.state = 673;
        this.param_list();
        this.state = 674;
        this.match(SyslParser.CLOSE_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_statements;
    return this;
}

StatementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementsContext.prototype.constructor = StatementsContext;

StatementsContext.prototype.if_else = function() {
    return this.getTypedRuleContext(If_elseContext,0);
};

StatementsContext.prototype.for_stmt = function() {
    return this.getTypedRuleContext(For_stmtContext,0);
};

StatementsContext.prototype.ret_stmt = function() {
    return this.getTypedRuleContext(Ret_stmtContext,0);
};

StatementsContext.prototype.call_stmt = function() {
    return this.getTypedRuleContext(Call_stmtContext,0);
};

StatementsContext.prototype.one_of_stmt = function() {
    return this.getTypedRuleContext(One_of_stmtContext,0);
};

StatementsContext.prototype.http_method_comment = function() {
    return this.getTypedRuleContext(Http_method_commentContext,0);
};

StatementsContext.prototype.group_stmt = function() {
    return this.getTypedRuleContext(Group_stmtContext,0);
};

StatementsContext.prototype.text_stmt = function() {
    return this.getTypedRuleContext(Text_stmtContext,0);
};

StatementsContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

StatementsContext.prototype.attribs_or_modifiers = function() {
    return this.getTypedRuleContext(Attribs_or_modifiersContext,0);
};

StatementsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterStatements(this);
	}
};

StatementsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitStatements(this);
	}
};




SyslParser.StatementsContext = StatementsContext;

SyslParser.prototype.statements = function() {

    var localctx = new StatementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, SyslParser.RULE_statements);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 685;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            this.state = 676;
            this.if_else();
            break;

        case 2:
            this.state = 677;
            this.for_stmt();
            break;

        case 3:
            this.state = 678;
            this.ret_stmt();
            break;

        case 4:
            this.state = 679;
            this.call_stmt();
            break;

        case 5:
            this.state = 680;
            this.one_of_stmt();
            break;

        case 6:
            this.state = 681;
            this.http_method_comment();
            break;

        case 7:
            this.state = 682;
            this.group_stmt();
            break;

        case 8:
            this.state = 683;
            this.text_stmt();
            break;

        case 9:
            this.state = 684;
            this.annotation();
            break;

        }
        this.state = 688;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.SQ_OPEN) {
            this.state = 687;
            this.attribs_or_modifiers();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Method_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_method_def;
    return this;
}

Method_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Method_defContext.prototype.constructor = Method_defContext;

Method_defContext.prototype.HTTP_VERBS = function() {
    return this.getToken(SyslParser.HTTP_VERBS, 0);
};

Method_defContext.prototype.COLON = function() {
    return this.getToken(SyslParser.COLON, 0);
};

Method_defContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

Method_defContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

Method_defContext.prototype.query_param = function() {
    return this.getTypedRuleContext(Query_paramContext,0);
};

Method_defContext.prototype.params = function() {
    return this.getTypedRuleContext(ParamsContext,0);
};

Method_defContext.prototype.attribs_or_modifiers = function() {
    return this.getTypedRuleContext(Attribs_or_modifiersContext,0);
};

Method_defContext.prototype.statements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementsContext);
    } else {
        return this.getTypedRuleContext(StatementsContext,i);
    }
};

Method_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterMethod_def(this);
	}
};

Method_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitMethod_def(this);
	}
};




SyslParser.Method_defContext = Method_defContext;

SyslParser.prototype.method_def = function() {

    var localctx = new Method_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, SyslParser.RULE_method_def);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 690;
        this.match(SyslParser.HTTP_VERBS);
        this.state = 692;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.QN) {
            this.state = 691;
            this.query_param();
        }

        this.state = 695;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.OPEN_PAREN) {
            this.state = 694;
            this.params();
        }

        this.state = 698;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.SQ_OPEN) {
            this.state = 697;
            this.attribs_or_modifiers();
        }

        this.state = 700;
        this.match(SyslParser.COLON);
        this.state = 701;
        this.match(SyslParser.INDENT);
        this.state = 703; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 702;
            this.statements();
            this.state = 705; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SyslParser.RETURN) | (1 << SyslParser.IF) | (1 << SyslParser.FOR_EACH) | (1 << SyslParser.FOR) | (1 << SyslParser.UNTIL) | (1 << SyslParser.LOOP) | (1 << SyslParser.ALT) | (1 << SyslParser.WHILE) | (1 << SyslParser.WHATEVER) | (1 << SyslParser.ONE_OF) | (1 << SyslParser.DOT_ARROW))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SyslParser.AT - 38)) | (1 << (SyslParser.PIPE - 38)) | (1 << (SyslParser.QSTRING - 38)) | (1 << (SyslParser.SYSL_COMMENT - 38)) | (1 << (SyslParser.TEXT_LINE - 38)) | (1 << (SyslParser.Name - 38)))) !== 0));
        this.state = 707;
        this.match(SyslParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShortcutContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_shortcut;
    return this;
}

ShortcutContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShortcutContext.prototype.constructor = ShortcutContext;

ShortcutContext.prototype.WHATEVER = function() {
    return this.getToken(SyslParser.WHATEVER, 0);
};

ShortcutContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterShortcut(this);
	}
};

ShortcutContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitShortcut(this);
	}
};




SyslParser.ShortcutContext = ShortcutContext;

SyslParser.prototype.shortcut = function() {

    var localctx = new ShortcutContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, SyslParser.RULE_shortcut);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 709;
        this.match(SyslParser.WHATEVER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_endpointContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_simple_endpoint;
    return this;
}

Simple_endpointContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_endpointContext.prototype.constructor = Simple_endpointContext;

Simple_endpointContext.prototype.WHATEVER = function() {
    return this.getToken(SyslParser.WHATEVER, 0);
};

Simple_endpointContext.prototype.endpoint_name = function() {
    return this.getTypedRuleContext(Endpoint_nameContext,0);
};

Simple_endpointContext.prototype.COLON = function() {
    return this.getToken(SyslParser.COLON, 0);
};

Simple_endpointContext.prototype.shortcut = function() {
    return this.getTypedRuleContext(ShortcutContext,0);
};

Simple_endpointContext.prototype.QSTRING = function() {
    return this.getToken(SyslParser.QSTRING, 0);
};

Simple_endpointContext.prototype.params = function() {
    return this.getTypedRuleContext(ParamsContext,0);
};

Simple_endpointContext.prototype.attribs_or_modifiers = function() {
    return this.getTypedRuleContext(Attribs_or_modifiersContext,0);
};

Simple_endpointContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

Simple_endpointContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

Simple_endpointContext.prototype.statements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementsContext);
    } else {
        return this.getTypedRuleContext(StatementsContext,i);
    }
};

Simple_endpointContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterSimple_endpoint(this);
	}
};

Simple_endpointContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitSimple_endpoint(this);
	}
};




SyslParser.Simple_endpointContext = Simple_endpointContext;

SyslParser.prototype.simple_endpoint = function() {

    var localctx = new Simple_endpointContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, SyslParser.RULE_simple_endpoint);
    var _la = 0; // Token type
    try {
        this.state = 734;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SyslParser.WHATEVER:
            this.enterOuterAlt(localctx, 1);
            this.state = 711;
            this.match(SyslParser.WHATEVER);
            break;
        case SyslParser.TEXT_LINE:
        case SyslParser.Name:
            this.enterOuterAlt(localctx, 2);
            this.state = 712;
            this.endpoint_name();
            this.state = 714;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SyslParser.QSTRING) {
                this.state = 713;
                this.match(SyslParser.QSTRING);
            }

            this.state = 717;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SyslParser.OPEN_PAREN) {
                this.state = 716;
                this.params();
            }

            this.state = 720;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SyslParser.SQ_OPEN) {
                this.state = 719;
                this.attribs_or_modifiers();
            }

            this.state = 722;
            this.match(SyslParser.COLON);
            this.state = 732;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SyslParser.WHATEVER:
                this.state = 723;
                this.shortcut();
                break;
            case SyslParser.INDENT:
                this.state = 724;
                this.match(SyslParser.INDENT);
                this.state = 726; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 725;
                    this.statements();
                    this.state = 728; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SyslParser.RETURN) | (1 << SyslParser.IF) | (1 << SyslParser.FOR_EACH) | (1 << SyslParser.FOR) | (1 << SyslParser.UNTIL) | (1 << SyslParser.LOOP) | (1 << SyslParser.ALT) | (1 << SyslParser.WHILE) | (1 << SyslParser.WHATEVER) | (1 << SyslParser.ONE_OF) | (1 << SyslParser.DOT_ARROW))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SyslParser.AT - 38)) | (1 << (SyslParser.PIPE - 38)) | (1 << (SyslParser.QSTRING - 38)) | (1 << (SyslParser.SYSL_COMMENT - 38)) | (1 << (SyslParser.TEXT_LINE - 38)) | (1 << (SyslParser.Name - 38)))) !== 0));
                this.state = 730;
                this.match(SyslParser.DEDENT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rest_endpointContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_rest_endpoint;
    return this;
}

Rest_endpointContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rest_endpointContext.prototype.constructor = Rest_endpointContext;

Rest_endpointContext.prototype.http_path = function() {
    return this.getTypedRuleContext(Http_pathContext,0);
};

Rest_endpointContext.prototype.COLON = function() {
    return this.getToken(SyslParser.COLON, 0);
};

Rest_endpointContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

Rest_endpointContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

Rest_endpointContext.prototype.attribs_or_modifiers = function() {
    return this.getTypedRuleContext(Attribs_or_modifiersContext,0);
};

Rest_endpointContext.prototype.method_def = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Method_defContext);
    } else {
        return this.getTypedRuleContext(Method_defContext,i);
    }
};

Rest_endpointContext.prototype.rest_endpoint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rest_endpointContext);
    } else {
        return this.getTypedRuleContext(Rest_endpointContext,i);
    }
};

Rest_endpointContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterRest_endpoint(this);
	}
};

Rest_endpointContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitRest_endpoint(this);
	}
};




SyslParser.Rest_endpointContext = Rest_endpointContext;

SyslParser.prototype.rest_endpoint = function() {

    var localctx = new Rest_endpointContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, SyslParser.RULE_rest_endpoint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 736;
        this.http_path();
        this.state = 738;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.SQ_OPEN) {
            this.state = 737;
            this.attribs_or_modifiers();
        }

        this.state = 740;
        this.match(SyslParser.COLON);

        this.state = 741;
        this.match(SyslParser.INDENT);
        this.state = 744; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 744;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SyslParser.HTTP_VERBS:
                this.state = 742;
                this.method_def();
                break;
            case SyslParser.FORWARD_SLASH:
                this.state = 743;
                this.rest_endpoint();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 746; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SyslParser.HTTP_VERBS || _la===SyslParser.FORWARD_SLASH);
        this.state = 748;
        this.match(SyslParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collector_query_varContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_collector_query_var;
    return this;
}

Collector_query_varContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collector_query_varContext.prototype.constructor = Collector_query_varContext;

Collector_query_varContext.prototype.name_str = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Name_strContext);
    } else {
        return this.getTypedRuleContext(Name_strContext,i);
    }
};

Collector_query_varContext.prototype.EQ = function() {
    return this.getToken(SyslParser.EQ, 0);
};

Collector_query_varContext.prototype.NativeDataTypes = function() {
    return this.getToken(SyslParser.NativeDataTypes, 0);
};

Collector_query_varContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterCollector_query_var(this);
	}
};

Collector_query_varContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitCollector_query_var(this);
	}
};




SyslParser.Collector_query_varContext = Collector_query_varContext;

SyslParser.prototype.collector_query_var = function() {

    var localctx = new Collector_query_varContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, SyslParser.RULE_collector_query_var);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 750;
        this.name_str();
        this.state = 751;
        this.match(SyslParser.EQ);
        this.state = 754;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SyslParser.NativeDataTypes:
            this.state = 752;
            this.match(SyslParser.NativeDataTypes);
            break;
        case SyslParser.TEXT_LINE:
        case SyslParser.Name:
            this.state = 753;
            this.name_str();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collector_query_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_collector_query_param;
    return this;
}

Collector_query_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collector_query_paramContext.prototype.constructor = Collector_query_paramContext;

Collector_query_paramContext.prototype.QN = function() {
    return this.getToken(SyslParser.QN, 0);
};

Collector_query_paramContext.prototype.collector_query_var = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Collector_query_varContext);
    } else {
        return this.getTypedRuleContext(Collector_query_varContext,i);
    }
};

Collector_query_paramContext.prototype.AMP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.AMP);
    } else {
        return this.getToken(SyslParser.AMP, i);
    }
};


Collector_query_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterCollector_query_param(this);
	}
};

Collector_query_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitCollector_query_param(this);
	}
};




SyslParser.Collector_query_paramContext = Collector_query_paramContext;

SyslParser.prototype.collector_query_param = function() {

    var localctx = new Collector_query_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, SyslParser.RULE_collector_query_param);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 756;
        this.match(SyslParser.QN);
        this.state = 757;
        this.collector_query_var();
        this.state = 762;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SyslParser.AMP) {
            this.state = 758;
            this.match(SyslParser.AMP);
            this.state = 759;
            this.collector_query_var();
            this.state = 764;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collector_call_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_collector_call_stmt;
    return this;
}

Collector_call_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collector_call_stmtContext.prototype.constructor = Collector_call_stmtContext;

Collector_call_stmtContext.prototype.target = function() {
    return this.getTypedRuleContext(TargetContext,0);
};

Collector_call_stmtContext.prototype.ARROW_LEFT = function() {
    return this.getToken(SyslParser.ARROW_LEFT, 0);
};

Collector_call_stmtContext.prototype.target_endpoint = function() {
    return this.getTypedRuleContext(Target_endpointContext,0);
};

Collector_call_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterCollector_call_stmt(this);
	}
};

Collector_call_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitCollector_call_stmt(this);
	}
};




SyslParser.Collector_call_stmtContext = Collector_call_stmtContext;

SyslParser.prototype.collector_call_stmt = function() {

    var localctx = new Collector_call_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, SyslParser.RULE_collector_call_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 765;
        this.target();
        this.state = 766;
        this.match(SyslParser.ARROW_LEFT);
        this.state = 767;
        this.target_endpoint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collector_http_stmt_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_collector_http_stmt_part;
    return this;
}

Collector_http_stmt_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collector_http_stmt_partContext.prototype.constructor = Collector_http_stmt_partContext;

Collector_http_stmt_partContext.prototype.name_str = function() {
    return this.getTypedRuleContext(Name_strContext,0);
};

Collector_http_stmt_partContext.prototype.CURLY_OPEN = function() {
    return this.getToken(SyslParser.CURLY_OPEN, 0);
};

Collector_http_stmt_partContext.prototype.CURLY_CLOSE = function() {
    return this.getToken(SyslParser.CURLY_CLOSE, 0);
};

Collector_http_stmt_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterCollector_http_stmt_part(this);
	}
};

Collector_http_stmt_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitCollector_http_stmt_part(this);
	}
};




SyslParser.Collector_http_stmt_partContext = Collector_http_stmt_partContext;

SyslParser.prototype.collector_http_stmt_part = function() {

    var localctx = new Collector_http_stmt_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, SyslParser.RULE_collector_http_stmt_part);
    try {
        this.state = 774;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SyslParser.TEXT_LINE:
        case SyslParser.Name:
            this.enterOuterAlt(localctx, 1);
            this.state = 769;
            this.name_str();
            break;
        case SyslParser.CURLY_OPEN:
            this.enterOuterAlt(localctx, 2);
            this.state = 770;
            this.match(SyslParser.CURLY_OPEN);
            this.state = 771;
            this.name_str();
            this.state = 772;
            this.match(SyslParser.CURLY_CLOSE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collector_http_stmt_suffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_collector_http_stmt_suffix;
    return this;
}

Collector_http_stmt_suffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collector_http_stmt_suffixContext.prototype.constructor = Collector_http_stmt_suffixContext;

Collector_http_stmt_suffixContext.prototype.FORWARD_SLASH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.FORWARD_SLASH);
    } else {
        return this.getToken(SyslParser.FORWARD_SLASH, i);
    }
};


Collector_http_stmt_suffixContext.prototype.collector_http_stmt_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Collector_http_stmt_partContext);
    } else {
        return this.getTypedRuleContext(Collector_http_stmt_partContext,i);
    }
};

Collector_http_stmt_suffixContext.prototype.collector_query_param = function() {
    return this.getTypedRuleContext(Collector_query_paramContext,0);
};

Collector_http_stmt_suffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterCollector_http_stmt_suffix(this);
	}
};

Collector_http_stmt_suffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitCollector_http_stmt_suffix(this);
	}
};




SyslParser.Collector_http_stmt_suffixContext = Collector_http_stmt_suffixContext;

SyslParser.prototype.collector_http_stmt_suffix = function() {

    var localctx = new Collector_http_stmt_suffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, SyslParser.RULE_collector_http_stmt_suffix);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 778; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 776;
            this.match(SyslParser.FORWARD_SLASH);
            this.state = 777;
            this.collector_http_stmt_part();
            this.state = 780; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SyslParser.FORWARD_SLASH);
        this.state = 783;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.QN) {
            this.state = 782;
            this.collector_query_param();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collector_http_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_collector_http_stmt;
    return this;
}

Collector_http_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collector_http_stmtContext.prototype.constructor = Collector_http_stmtContext;

Collector_http_stmtContext.prototype.HTTP_VERBS = function() {
    return this.getToken(SyslParser.HTTP_VERBS, 0);
};

Collector_http_stmtContext.prototype.collector_http_stmt_suffix = function() {
    return this.getTypedRuleContext(Collector_http_stmt_suffixContext,0);
};

Collector_http_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterCollector_http_stmt(this);
	}
};

Collector_http_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitCollector_http_stmt(this);
	}
};




SyslParser.Collector_http_stmtContext = Collector_http_stmtContext;

SyslParser.prototype.collector_http_stmt = function() {

    var localctx = new Collector_http_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, SyslParser.RULE_collector_http_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 785;
        this.match(SyslParser.HTTP_VERBS);
        this.state = 786;
        this.collector_http_stmt_suffix();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PublisherContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_publisher;
    return this;
}

PublisherContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PublisherContext.prototype.constructor = PublisherContext;

PublisherContext.prototype.app_name = function() {
    return this.getTypedRuleContext(App_nameContext,0);
};

PublisherContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterPublisher(this);
	}
};

PublisherContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitPublisher(this);
	}
};




SyslParser.PublisherContext = PublisherContext;

SyslParser.prototype.publisher = function() {

    var localctx = new PublisherContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, SyslParser.RULE_publisher);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 788;
        this.app_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubscriberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_subscriber;
    return this;
}

SubscriberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubscriberContext.prototype.constructor = SubscriberContext;

SubscriberContext.prototype.app_name = function() {
    return this.getTypedRuleContext(App_nameContext,0);
};

SubscriberContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterSubscriber(this);
	}
};

SubscriberContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitSubscriber(this);
	}
};




SyslParser.SubscriberContext = SubscriberContext;

SyslParser.prototype.subscriber = function() {

    var localctx = new SubscriberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, SyslParser.RULE_subscriber);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 790;
        this.app_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collector_pubsub_callContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_collector_pubsub_call;
    return this;
}

Collector_pubsub_callContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collector_pubsub_callContext.prototype.constructor = Collector_pubsub_callContext;

Collector_pubsub_callContext.prototype.subscriber = function() {
    return this.getTypedRuleContext(SubscriberContext,0);
};

Collector_pubsub_callContext.prototype.ARROW_LEFT = function() {
    return this.getToken(SyslParser.ARROW_LEFT, 0);
};

Collector_pubsub_callContext.prototype.publisher = function() {
    return this.getTypedRuleContext(PublisherContext,0);
};

Collector_pubsub_callContext.prototype.ARROW_RIGHT = function() {
    return this.getToken(SyslParser.ARROW_RIGHT, 0);
};

Collector_pubsub_callContext.prototype.name_str = function() {
    return this.getTypedRuleContext(Name_strContext,0);
};

Collector_pubsub_callContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterCollector_pubsub_call(this);
	}
};

Collector_pubsub_callContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitCollector_pubsub_call(this);
	}
};




SyslParser.Collector_pubsub_callContext = Collector_pubsub_callContext;

SyslParser.prototype.collector_pubsub_call = function() {

    var localctx = new Collector_pubsub_callContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, SyslParser.RULE_collector_pubsub_call);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 792;
        this.subscriber();
        this.state = 793;
        this.match(SyslParser.ARROW_LEFT);
        this.state = 794;
        this.publisher();
        this.state = 795;
        this.match(SyslParser.ARROW_RIGHT);
        this.state = 796;
        this.name_str();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collector_action_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_collector_action_stmt;
    return this;
}

Collector_action_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collector_action_stmtContext.prototype.constructor = Collector_action_stmtContext;

Collector_action_stmtContext.prototype.name_str = function() {
    return this.getTypedRuleContext(Name_strContext,0);
};

Collector_action_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterCollector_action_stmt(this);
	}
};

Collector_action_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitCollector_action_stmt(this);
	}
};




SyslParser.Collector_action_stmtContext = Collector_action_stmtContext;

SyslParser.prototype.collector_action_stmt = function() {

    var localctx = new Collector_action_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, SyslParser.RULE_collector_action_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 798;
        this.name_str();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collector_stmtsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_collector_stmts;
    return this;
}

Collector_stmtsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collector_stmtsContext.prototype.constructor = Collector_stmtsContext;

Collector_stmtsContext.prototype.attribs_or_modifiers = function() {
    return this.getTypedRuleContext(Attribs_or_modifiersContext,0);
};

Collector_stmtsContext.prototype.collector_action_stmt = function() {
    return this.getTypedRuleContext(Collector_action_stmtContext,0);
};

Collector_stmtsContext.prototype.collector_call_stmt = function() {
    return this.getTypedRuleContext(Collector_call_stmtContext,0);
};

Collector_stmtsContext.prototype.collector_http_stmt = function() {
    return this.getTypedRuleContext(Collector_http_stmtContext,0);
};

Collector_stmtsContext.prototype.collector_pubsub_call = function() {
    return this.getTypedRuleContext(Collector_pubsub_callContext,0);
};

Collector_stmtsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterCollector_stmts(this);
	}
};

Collector_stmtsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitCollector_stmts(this);
	}
};




SyslParser.Collector_stmtsContext = Collector_stmtsContext;

SyslParser.prototype.collector_stmts = function() {

    var localctx = new Collector_stmtsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, SyslParser.RULE_collector_stmts);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 804;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
        switch(la_) {
        case 1:
            this.state = 800;
            this.collector_action_stmt();
            break;

        case 2:
            this.state = 801;
            this.collector_call_stmt();
            break;

        case 3:
            this.state = 802;
            this.collector_http_stmt();
            break;

        case 4:
            this.state = 803;
            this.collector_pubsub_call();
            break;

        }
        this.state = 806;
        this.attribs_or_modifiers();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CollectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_collector;
    return this;
}

CollectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CollectorContext.prototype.constructor = CollectorContext;

CollectorContext.prototype.COLLECTOR = function() {
    return this.getToken(SyslParser.COLLECTOR, 0);
};

CollectorContext.prototype.COLON = function() {
    return this.getToken(SyslParser.COLON, 0);
};

CollectorContext.prototype.WHATEVER = function() {
    return this.getToken(SyslParser.WHATEVER, 0);
};

CollectorContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

CollectorContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

CollectorContext.prototype.collector_stmts = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Collector_stmtsContext);
    } else {
        return this.getTypedRuleContext(Collector_stmtsContext,i);
    }
};

CollectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterCollector(this);
	}
};

CollectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitCollector(this);
	}
};




SyslParser.CollectorContext = CollectorContext;

SyslParser.prototype.collector = function() {

    var localctx = new CollectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, SyslParser.RULE_collector);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 808;
        this.match(SyslParser.COLLECTOR);
        this.state = 809;
        this.match(SyslParser.COLON);
        this.state = 819;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SyslParser.WHATEVER:
            this.state = 810;
            this.match(SyslParser.WHATEVER);
            break;
        case SyslParser.INDENT:
            this.state = 811;
            this.match(SyslParser.INDENT);
            this.state = 813; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 812;
                this.collector_stmts();
                this.state = 815; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SyslParser.HTTP_VERBS || _la===SyslParser.TEXT_LINE || _la===SyslParser.Name);
            this.state = 817;
            this.match(SyslParser.DEDENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EventContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_event;
    return this;
}

EventContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventContext.prototype.constructor = EventContext;

EventContext.prototype.DISTANCE = function() {
    return this.getToken(SyslParser.DISTANCE, 0);
};

EventContext.prototype.name_str = function() {
    return this.getTypedRuleContext(Name_strContext,0);
};

EventContext.prototype.COLON = function() {
    return this.getToken(SyslParser.COLON, 0);
};

EventContext.prototype.WHATEVER = function() {
    return this.getToken(SyslParser.WHATEVER, 0);
};

EventContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

EventContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

EventContext.prototype.params = function() {
    return this.getTypedRuleContext(ParamsContext,0);
};

EventContext.prototype.attribs_or_modifiers = function() {
    return this.getTypedRuleContext(Attribs_or_modifiersContext,0);
};

EventContext.prototype.statements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementsContext);
    } else {
        return this.getTypedRuleContext(StatementsContext,i);
    }
};

EventContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterEvent(this);
	}
};

EventContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitEvent(this);
	}
};




SyslParser.EventContext = EventContext;

SyslParser.prototype.event = function() {

    var localctx = new EventContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, SyslParser.RULE_event);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 821;
        this.match(SyslParser.DISTANCE);
        this.state = 822;
        this.name_str();
        this.state = 824;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.OPEN_PAREN) {
            this.state = 823;
            this.params();
        }

        this.state = 827;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.SQ_OPEN) {
            this.state = 826;
            this.attribs_or_modifiers();
        }

        this.state = 829;
        this.match(SyslParser.COLON);
        this.state = 839;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SyslParser.WHATEVER:
            this.state = 830;
            this.match(SyslParser.WHATEVER);
            break;
        case SyslParser.INDENT:
            this.state = 831;
            this.match(SyslParser.INDENT);
            this.state = 833; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 832;
                this.statements();
                this.state = 835; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SyslParser.RETURN) | (1 << SyslParser.IF) | (1 << SyslParser.FOR_EACH) | (1 << SyslParser.FOR) | (1 << SyslParser.UNTIL) | (1 << SyslParser.LOOP) | (1 << SyslParser.ALT) | (1 << SyslParser.WHILE) | (1 << SyslParser.WHATEVER) | (1 << SyslParser.ONE_OF) | (1 << SyslParser.DOT_ARROW))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SyslParser.AT - 38)) | (1 << (SyslParser.PIPE - 38)) | (1 << (SyslParser.QSTRING - 38)) | (1 << (SyslParser.SYSL_COMMENT - 38)) | (1 << (SyslParser.TEXT_LINE - 38)) | (1 << (SyslParser.Name - 38)))) !== 0));
            this.state = 837;
            this.match(SyslParser.DEDENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubscribeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_subscribe;
    return this;
}

SubscribeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubscribeContext.prototype.constructor = SubscribeContext;

SubscribeContext.prototype.app_name = function() {
    return this.getTypedRuleContext(App_nameContext,0);
};

SubscribeContext.prototype.ARROW_RIGHT = function() {
    return this.getToken(SyslParser.ARROW_RIGHT, 0);
};

SubscribeContext.prototype.name_str = function() {
    return this.getTypedRuleContext(Name_strContext,0);
};

SubscribeContext.prototype.COLON = function() {
    return this.getToken(SyslParser.COLON, 0);
};

SubscribeContext.prototype.WHATEVER = function() {
    return this.getToken(SyslParser.WHATEVER, 0);
};

SubscribeContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

SubscribeContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

SubscribeContext.prototype.attribs_or_modifiers = function() {
    return this.getTypedRuleContext(Attribs_or_modifiersContext,0);
};

SubscribeContext.prototype.statements = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementsContext);
    } else {
        return this.getTypedRuleContext(StatementsContext,i);
    }
};

SubscribeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterSubscribe(this);
	}
};

SubscribeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitSubscribe(this);
	}
};




SyslParser.SubscribeContext = SubscribeContext;

SyslParser.prototype.subscribe = function() {

    var localctx = new SubscribeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, SyslParser.RULE_subscribe);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 841;
        this.app_name();
        this.state = 842;
        this.match(SyslParser.ARROW_RIGHT);
        this.state = 843;
        this.name_str();
        this.state = 845;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.SQ_OPEN) {
            this.state = 844;
            this.attribs_or_modifiers();
        }

        this.state = 847;
        this.match(SyslParser.COLON);
        this.state = 857;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SyslParser.WHATEVER:
            this.state = 848;
            this.match(SyslParser.WHATEVER);
            break;
        case SyslParser.INDENT:
            this.state = 849;
            this.match(SyslParser.INDENT);
            this.state = 851; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 850;
                this.statements();
                this.state = 853; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SyslParser.RETURN) | (1 << SyslParser.IF) | (1 << SyslParser.FOR_EACH) | (1 << SyslParser.FOR) | (1 << SyslParser.UNTIL) | (1 << SyslParser.LOOP) | (1 << SyslParser.ALT) | (1 << SyslParser.WHILE) | (1 << SyslParser.WHATEVER) | (1 << SyslParser.ONE_OF) | (1 << SyslParser.DOT_ARROW))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (SyslParser.AT - 38)) | (1 << (SyslParser.PIPE - 38)) | (1 << (SyslParser.QSTRING - 38)) | (1 << (SyslParser.SYSL_COMMENT - 38)) | (1 << (SyslParser.TEXT_LINE - 38)) | (1 << (SyslParser.Name - 38)))) !== 0));
            this.state = 855;
            this.match(SyslParser.DEDENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function App_declContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_app_decl;
    return this;
}

App_declContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
App_declContext.prototype.constructor = App_declContext;

App_declContext.prototype.INDENT = function() {
    return this.getToken(SyslParser.INDENT, 0);
};

App_declContext.prototype.DEDENT = function() {
    return this.getToken(SyslParser.DEDENT, 0);
};

App_declContext.prototype.table = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableContext);
    } else {
        return this.getTypedRuleContext(TableContext,i);
    }
};

App_declContext.prototype.facade = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FacadeContext);
    } else {
        return this.getTypedRuleContext(FacadeContext,i);
    }
};

App_declContext.prototype.SYSL_COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.SYSL_COMMENT);
    } else {
        return this.getToken(SyslParser.SYSL_COMMENT, i);
    }
};


App_declContext.prototype.rest_endpoint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rest_endpointContext);
    } else {
        return this.getTypedRuleContext(Rest_endpointContext,i);
    }
};

App_declContext.prototype.simple_endpoint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simple_endpointContext);
    } else {
        return this.getTypedRuleContext(Simple_endpointContext,i);
    }
};

App_declContext.prototype.collector = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CollectorContext);
    } else {
        return this.getTypedRuleContext(CollectorContext,i);
    }
};

App_declContext.prototype.event = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EventContext);
    } else {
        return this.getTypedRuleContext(EventContext,i);
    }
};

App_declContext.prototype.subscribe = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SubscribeContext);
    } else {
        return this.getTypedRuleContext(SubscribeContext,i);
    }
};

App_declContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

App_declContext.prototype.mixin = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MixinContext);
    } else {
        return this.getTypedRuleContext(MixinContext,i);
    }
};

App_declContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterApp_decl(this);
	}
};

App_declContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitApp_decl(this);
	}
};




SyslParser.App_declContext = App_declContext;

SyslParser.prototype.app_decl = function() {

    var localctx = new App_declContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, SyslParser.RULE_app_decl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 859;
        this.match(SyslParser.INDENT);
        this.state = 870; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 870;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
            switch(la_) {
            case 1:
                this.state = 860;
                this.table();
                break;

            case 2:
                this.state = 861;
                this.facade();
                break;

            case 3:
                this.state = 862;
                this.match(SyslParser.SYSL_COMMENT);
                break;

            case 4:
                this.state = 863;
                this.rest_endpoint();
                break;

            case 5:
                this.state = 864;
                this.simple_endpoint();
                break;

            case 6:
                this.state = 865;
                this.collector();
                break;

            case 7:
                this.state = 866;
                this.event();
                break;

            case 8:
                this.state = 867;
                this.subscribe();
                break;

            case 9:
                this.state = 868;
                this.annotation();
                break;

            case 10:
                this.state = 869;
                this.mixin();
                break;

            }
            this.state = 872; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SyslParser.WRAP) | (1 << SyslParser.TABLE) | (1 << SyslParser.TYPE) | (1 << SyslParser.WHATEVER) | (1 << SyslParser.MIXIN) | (1 << SyslParser.DISTANCE) | (1 << SyslParser.COLLECTOR))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (SyslParser.FORWARD_SLASH - 34)) | (1 << (SyslParser.AT - 34)) | (1 << (SyslParser.SYSL_COMMENT - 34)) | (1 << (SyslParser.TEXT_LINE - 34)) | (1 << (SyslParser.Name - 34)))) !== 0));
        this.state = 874;
        this.match(SyslParser.DEDENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ApplicationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_application;
    return this;
}

ApplicationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ApplicationContext.prototype.constructor = ApplicationContext;

ApplicationContext.prototype.name_with_attribs = function() {
    return this.getTypedRuleContext(Name_with_attribsContext,0);
};

ApplicationContext.prototype.COLON = function() {
    return this.getToken(SyslParser.COLON, 0);
};

ApplicationContext.prototype.app_decl = function() {
    return this.getTypedRuleContext(App_declContext,0);
};

ApplicationContext.prototype.SYSL_COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.SYSL_COMMENT);
    } else {
        return this.getToken(SyslParser.SYSL_COMMENT, i);
    }
};


ApplicationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterApplication(this);
	}
};

ApplicationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitApplication(this);
	}
};




SyslParser.ApplicationContext = ApplicationContext;

SyslParser.prototype.application = function() {

    var localctx = new ApplicationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, SyslParser.RULE_application);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 879;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SyslParser.SYSL_COMMENT) {
            this.state = 876;
            this.match(SyslParser.SYSL_COMMENT);
            this.state = 881;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 882;
        this.name_with_attribs();
        this.state = 883;
        this.match(SyslParser.COLON);
        this.state = 884;
        this.app_decl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_path;
    return this;
}

PathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathContext.prototype.constructor = PathContext;

PathContext.prototype.Name = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.Name);
    } else {
        return this.getToken(SyslParser.Name, i);
    }
};


PathContext.prototype.FORWARD_SLASH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.FORWARD_SLASH);
    } else {
        return this.getToken(SyslParser.FORWARD_SLASH, i);
    }
};


PathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterPath(this);
	}
};

PathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitPath(this);
	}
};




SyslParser.PathContext = PathContext;

SyslParser.prototype.path = function() {

    var localctx = new PathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, SyslParser.RULE_path);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 887;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.FORWARD_SLASH) {
            this.state = 886;
            this.match(SyslParser.FORWARD_SLASH);
        }

        this.state = 889;
        this.match(SyslParser.Name);
        this.state = 894;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SyslParser.FORWARD_SLASH) {
            this.state = 890;
            this.match(SyslParser.FORWARD_SLASH);
            this.state = 891;
            this.match(SyslParser.Name);
            this.state = 896;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Import_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_import_stmt;
    return this;
}

Import_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_stmtContext.prototype.constructor = Import_stmtContext;

Import_stmtContext.prototype.IMPORT = function() {
    return this.getToken(SyslParser.IMPORT, 0);
};

Import_stmtContext.prototype.SYSL_COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SyslParser.SYSL_COMMENT);
    } else {
        return this.getToken(SyslParser.SYSL_COMMENT, i);
    }
};


Import_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterImport_stmt(this);
	}
};

Import_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitImport_stmt(this);
	}
};




SyslParser.Import_stmtContext = Import_stmtContext;

SyslParser.prototype.import_stmt = function() {

    var localctx = new Import_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, SyslParser.RULE_import_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 897;
        this.match(SyslParser.IMPORT);
        this.state = 901;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,106,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 898;
                this.match(SyslParser.SYSL_COMMENT); 
            }
            this.state = 903;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,106,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Imports_declContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_imports_decl;
    return this;
}

Imports_declContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Imports_declContext.prototype.constructor = Imports_declContext;

Imports_declContext.prototype.import_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Import_stmtContext);
    } else {
        return this.getTypedRuleContext(Import_stmtContext,i);
    }
};

Imports_declContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterImports_decl(this);
	}
};

Imports_declContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitImports_decl(this);
	}
};




SyslParser.Imports_declContext = Imports_declContext;

SyslParser.prototype.imports_decl = function() {

    var localctx = new Imports_declContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, SyslParser.RULE_imports_decl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 905; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 904;
            this.import_stmt();
            this.state = 907; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SyslParser.IMPORT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sysl_fileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SyslParser.RULE_sysl_file;
    return this;
}

Sysl_fileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sysl_fileContext.prototype.constructor = Sysl_fileContext;

Sysl_fileContext.prototype.EOF = function() {
    return this.getToken(SyslParser.EOF, 0);
};

Sysl_fileContext.prototype.imports_decl = function() {
    return this.getTypedRuleContext(Imports_declContext,0);
};

Sysl_fileContext.prototype.application = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ApplicationContext);
    } else {
        return this.getTypedRuleContext(ApplicationContext,i);
    }
};

Sysl_fileContext.prototype.enterRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.enterSysl_file(this);
	}
};

Sysl_fileContext.prototype.exitRule = function(listener) {
    if(listener instanceof SyslParserListener ) {
        listener.exitSysl_file(this);
	}
};




SyslParser.Sysl_fileContext = Sysl_fileContext;

SyslParser.prototype.sysl_file = function() {

    var localctx = new Sysl_fileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, SyslParser.RULE_sysl_file);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 910;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SyslParser.IMPORT) {
            this.state = 909;
            this.imports_decl();
        }

        this.state = 913; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 912;
            this.application();
            this.state = 915; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (SyslParser.SYSL_COMMENT - 54)) | (1 << (SyslParser.TEXT_LINE - 54)) | (1 << (SyslParser.Name - 54)))) !== 0));
        this.state = 917;
        this.match(SyslParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.SyslParser = SyslParser;
